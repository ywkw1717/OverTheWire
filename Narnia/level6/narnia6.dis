
narnia6:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048390 <_init>:
 8048390:	53                   	push   ebx
 8048391:	83 ec 08             	sub    esp,0x8
 8048394:	e8 e7 00 00 00       	call   8048480 <__x86.get_pc_thunk.bx>
 8048399:	81 c3 bb 15 00 00    	add    ebx,0x15bb
 804839f:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80483a5:	85 c0                	test   eax,eax
 80483a7:	74 05                	je     80483ae <_init+0x1e>
 80483a9:	e8 52 00 00 00       	call   8048400 <__gmon_start__@plt>
 80483ae:	83 c4 08             	add    esp,0x8
 80483b1:	5b                   	pop    ebx
 80483b2:	c3                   	ret    

セクション .plt の逆アセンブル:

080483c0 <printf@plt-0x10>:
 80483c0:	ff 35 58 99 04 08    	push   DWORD PTR ds:0x8049958
 80483c6:	ff 25 5c 99 04 08    	jmp    DWORD PTR ds:0x804995c
 80483cc:	00 00                	add    BYTE PTR [eax],al
	...

080483d0 <printf@plt>:
 80483d0:	ff 25 60 99 04 08    	jmp    DWORD PTR ds:0x8049960
 80483d6:	68 00 00 00 00       	push   0x0
 80483db:	e9 e0 ff ff ff       	jmp    80483c0 <_init+0x30>

080483e0 <strcpy@plt>:
 80483e0:	ff 25 64 99 04 08    	jmp    DWORD PTR ds:0x8049964
 80483e6:	68 08 00 00 00       	push   0x8
 80483eb:	e9 d0 ff ff ff       	jmp    80483c0 <_init+0x30>

080483f0 <puts@plt>:
 80483f0:	ff 25 68 99 04 08    	jmp    DWORD PTR ds:0x8049968
 80483f6:	68 10 00 00 00       	push   0x10
 80483fb:	e9 c0 ff ff ff       	jmp    80483c0 <_init+0x30>

08048400 <__gmon_start__@plt>:
 8048400:	ff 25 6c 99 04 08    	jmp    DWORD PTR ds:0x804996c
 8048406:	68 18 00 00 00       	push   0x18
 804840b:	e9 b0 ff ff ff       	jmp    80483c0 <_init+0x30>

08048410 <exit@plt>:
 8048410:	ff 25 70 99 04 08    	jmp    DWORD PTR ds:0x8049970
 8048416:	68 20 00 00 00       	push   0x20
 804841b:	e9 a0 ff ff ff       	jmp    80483c0 <_init+0x30>

08048420 <strlen@plt>:
 8048420:	ff 25 74 99 04 08    	jmp    DWORD PTR ds:0x8049974
 8048426:	68 28 00 00 00       	push   0x28
 804842b:	e9 90 ff ff ff       	jmp    80483c0 <_init+0x30>

08048430 <__libc_start_main@plt>:
 8048430:	ff 25 78 99 04 08    	jmp    DWORD PTR ds:0x8049978
 8048436:	68 30 00 00 00       	push   0x30
 804843b:	e9 80 ff ff ff       	jmp    80483c0 <_init+0x30>

08048440 <memset@plt>:
 8048440:	ff 25 7c 99 04 08    	jmp    DWORD PTR ds:0x804997c
 8048446:	68 38 00 00 00       	push   0x38
 804844b:	e9 70 ff ff ff       	jmp    80483c0 <_init+0x30>

セクション .text の逆アセンブル:

08048450 <_start>:
 8048450:	31 ed                	xor    ebp,ebp
 8048452:	5e                   	pop    esi
 8048453:	89 e1                	mov    ecx,esp
 8048455:	83 e4 f0             	and    esp,0xfffffff0
 8048458:	50                   	push   eax
 8048459:	54                   	push   esp
 804845a:	52                   	push   edx
 804845b:	68 30 87 04 08       	push   0x8048730
 8048460:	68 c0 86 04 08       	push   0x80486c0
 8048465:	51                   	push   ecx
 8048466:	56                   	push   esi
 8048467:	68 59 85 04 08       	push   0x8048559
 804846c:	e8 bf ff ff ff       	call   8048430 <__libc_start_main@plt>
 8048471:	f4                   	hlt    
 8048472:	66 90                	xchg   ax,ax
 8048474:	66 90                	xchg   ax,ax
 8048476:	66 90                	xchg   ax,ax
 8048478:	66 90                	xchg   ax,ax
 804847a:	66 90                	xchg   ax,ax
 804847c:	66 90                	xchg   ax,ax
 804847e:	66 90                	xchg   ax,ax

08048480 <__x86.get_pc_thunk.bx>:
 8048480:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048483:	c3                   	ret    
 8048484:	66 90                	xchg   ax,ax
 8048486:	66 90                	xchg   ax,ax
 8048488:	66 90                	xchg   ax,ax
 804848a:	66 90                	xchg   ax,ax
 804848c:	66 90                	xchg   ax,ax
 804848e:	66 90                	xchg   ax,ax

08048490 <deregister_tm_clones>:
 8048490:	b8 8b 99 04 08       	mov    eax,0x804998b
 8048495:	2d 88 99 04 08       	sub    eax,0x8049988
 804849a:	83 f8 06             	cmp    eax,0x6
 804849d:	77 01                	ja     80484a0 <deregister_tm_clones+0x10>
 804849f:	c3                   	ret    
 80484a0:	b8 00 00 00 00       	mov    eax,0x0
 80484a5:	85 c0                	test   eax,eax
 80484a7:	74 f6                	je     804849f <deregister_tm_clones+0xf>
 80484a9:	55                   	push   ebp
 80484aa:	89 e5                	mov    ebp,esp
 80484ac:	83 ec 18             	sub    esp,0x18
 80484af:	c7 04 24 88 99 04 08 	mov    DWORD PTR [esp],0x8049988
 80484b6:	ff d0                	call   eax
 80484b8:	c9                   	leave  
 80484b9:	c3                   	ret    
 80484ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

080484c0 <register_tm_clones>:
 80484c0:	b8 88 99 04 08       	mov    eax,0x8049988
 80484c5:	2d 88 99 04 08       	sub    eax,0x8049988
 80484ca:	c1 f8 02             	sar    eax,0x2
 80484cd:	89 c2                	mov    edx,eax
 80484cf:	c1 ea 1f             	shr    edx,0x1f
 80484d2:	01 d0                	add    eax,edx
 80484d4:	d1 f8                	sar    eax,1
 80484d6:	75 01                	jne    80484d9 <register_tm_clones+0x19>
 80484d8:	c3                   	ret    
 80484d9:	ba 00 00 00 00       	mov    edx,0x0
 80484de:	85 d2                	test   edx,edx
 80484e0:	74 f6                	je     80484d8 <register_tm_clones+0x18>
 80484e2:	55                   	push   ebp
 80484e3:	89 e5                	mov    ebp,esp
 80484e5:	83 ec 18             	sub    esp,0x18
 80484e8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80484ec:	c7 04 24 88 99 04 08 	mov    DWORD PTR [esp],0x8049988
 80484f3:	ff d2                	call   edx
 80484f5:	c9                   	leave  
 80484f6:	c3                   	ret    
 80484f7:	89 f6                	mov    esi,esi
 80484f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048500 <__do_global_dtors_aux>:
 8048500:	80 3d a4 99 04 08 00 	cmp    BYTE PTR ds:0x80499a4,0x0
 8048507:	75 13                	jne    804851c <__do_global_dtors_aux+0x1c>
 8048509:	55                   	push   ebp
 804850a:	89 e5                	mov    ebp,esp
 804850c:	83 ec 08             	sub    esp,0x8
 804850f:	e8 7c ff ff ff       	call   8048490 <deregister_tm_clones>
 8048514:	c6 05 a4 99 04 08 01 	mov    BYTE PTR ds:0x80499a4,0x1
 804851b:	c9                   	leave  
 804851c:	f3 c3                	repz ret 
 804851e:	66 90                	xchg   ax,ax

08048520 <frame_dummy>:
 8048520:	a1 64 98 04 08       	mov    eax,ds:0x8049864
 8048525:	85 c0                	test   eax,eax
 8048527:	74 1f                	je     8048548 <frame_dummy+0x28>
 8048529:	b8 00 00 00 00       	mov    eax,0x0
 804852e:	85 c0                	test   eax,eax
 8048530:	74 16                	je     8048548 <frame_dummy+0x28>
 8048532:	55                   	push   ebp
 8048533:	89 e5                	mov    ebp,esp
 8048535:	83 ec 18             	sub    esp,0x18
 8048538:	c7 04 24 64 98 04 08 	mov    DWORD PTR [esp],0x8049864
 804853f:	ff d0                	call   eax
 8048541:	c9                   	leave  
 8048542:	e9 79 ff ff ff       	jmp    80484c0 <register_tm_clones>
 8048547:	90                   	nop
 8048548:	e9 73 ff ff ff       	jmp    80484c0 <register_tm_clones>

0804854d <get_sp>:
 804854d:	55                   	push   ebp
 804854e:	89 e5                	mov    ebp,esp
 8048550:	89 e0                	mov    eax,esp
 8048552:	25 00 00 00 ff       	and    eax,0xff000000
 8048557:	5d                   	pop    ebp
 8048558:	c3                   	ret    

08048559 <main>:
 8048559:	55                   	push   ebp
 804855a:	89 e5                	mov    ebp,esp
 804855c:	53                   	push   ebx
 804855d:	83 e4 f0             	and    esp,0xfffffff0
 8048560:	83 ec 30             	sub    esp,0x30
 8048563:	c7 44 24 28 f0 83 04 	mov    DWORD PTR [esp+0x28],0x80483f0
 804856a:	08 
 804856b:	83 7d 08 03          	cmp    DWORD PTR [ebp+0x8],0x3 # argc == 0x3 ??
 804856f:	74 21                	je     8048592 <main+0x39>
 8048571:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # /home/..../narnia6 (argv[0])
 8048574:	8b 00                	mov    eax,DWORD PTR [eax]
 8048576:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804857a:	c7 04 24 50 87 04 08 	mov    DWORD PTR [esp],0x8048750 # "%s b1 b2\n"
 8048581:	e8 4a fe ff ff       	call   80483d0 <printf@plt> # printf("%s b1 b2\n", argv[0])
 8048586:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
 804858d:	e8 7e fe ff ff       	call   8048410 <exit@plt> # exit
 8048592:	c7 44 24 2c 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0 # hoge = 0
 8048599:	00 
 804859a:	eb 42                	jmp    80485de <main+0x85>
 804859c:	a1 a0 99 04 08       	mov    eax,ds:0x80499a0 # loop start
 80485a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
 80485a5:	c1 e2 02             	shl    edx,0x2
 80485a8:	01 d0                	add    eax,edx
 80485aa:	8b 00                	mov    eax,DWORD PTR [eax]
 80485ac:	89 04 24             	mov    DWORD PTR [esp],eax
 80485af:	e8 6c fe ff ff       	call   8048420 <strlen@plt>
 80485b4:	8b 15 a0 99 04 08    	mov    edx,DWORD PTR ds:0x80499a0
 80485ba:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
 80485be:	c1 e1 02             	shl    ecx,0x2
 80485c1:	01 ca                	add    edx,ecx
 80485c3:	8b 12                	mov    edx,DWORD PTR [edx]
 80485c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80485c9:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 80485d0:	00 
 80485d1:	89 14 24             	mov    DWORD PTR [esp],edx
 80485d4:	e8 67 fe ff ff       	call   8048440 <memset@plt>
 80485d9:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
 80485de:	a1 a0 99 04 08       	mov    eax,ds:0x80499a0 # environ
 80485e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c] # edx = hoge
 80485e7:	c1 e2 02             	shl    edx,0x2 # edx << 2
 80485ea:	01 d0                	add    eax,edx # eax += edx
 80485ec:	8b 00                	mov    eax,DWORD PTR [eax]
 80485ee:	85 c0                	test   eax,eax
 80485f0:	75 aa                	jne    804859c <main+0x43> # loop end
 80485f2:	c7 44 24 2c 03 00 00 	mov    DWORD PTR [esp+0x2c],0x3 # hoge = 3
 80485f9:	00 
 80485fa:	eb 45                	jmp    8048641 <main+0xe8>
 80485fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c] # loop start
 8048600:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
 8048607:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 804860a:	01 d0                	add    eax,edx
 804860c:	8b 00                	mov    eax,DWORD PTR [eax]
 804860e:	89 04 24             	mov    DWORD PTR [esp],eax
 8048611:	e8 0a fe ff ff       	call   8048420 <strlen@plt>
 8048616:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
 804861a:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
 8048621:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
 8048624:	01 ca                	add    edx,ecx
 8048626:	8b 12                	mov    edx,DWORD PTR [edx]
 8048628:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 804862c:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 8048633:	00 
 8048634:	89 14 24             	mov    DWORD PTR [esp],edx
 8048637:	e8 04 fe ff ff       	call   8048440 <memset@plt>
 804863c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
 8048641:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c] # eax = hoge
 8048645:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
 804864c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # argv[0]
 804864f:	01 d0                	add    eax,edx
 8048651:	8b 00                	mov    eax,DWORD PTR [eax]
 8048653:	85 c0                	test   eax,eax
 8048655:	75 a5                	jne    80485fc <main+0xa3> # loop end
 8048657:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # argv[0]
 804865a:	83 c0 04             	add    eax,0x4 # argv[1]
 804865d:	8b 00                	mov    eax,DWORD PTR [eax]
 804865f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048663:	8d 44 24 20          	lea    eax,[esp+0x20] # buf1
 8048667:	89 04 24             	mov    DWORD PTR [esp],eax
 804866a:	e8 71 fd ff ff       	call   80483e0 <strcpy@plt> # strcpy(buf1, argv[1])
 804866f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # argv[0]
 8048672:	83 c0 08             	add    eax,0x8 # argv[2]
 8048675:	8b 00                	mov    eax,DWORD PTR [eax]
 8048677:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804867b:	8d 44 24 18          	lea    eax,[esp+0x18] # bu2f
 804867f:	89 04 24             	mov    DWORD PTR [esp],eax
 8048682:	e8 59 fd ff ff       	call   80483e0 <strcpy@plt> # strcpy(buf2, argv[2])
 8048687:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
 804868b:	25 00 00 00 ff       	and    eax,0xff000000
 8048690:	89 c3                	mov    ebx,eax
 8048692:	e8 b6 fe ff ff       	call   804854d <get_sp>
 8048697:	39 c3                	cmp    ebx,eax
 8048699:	75 0c                	jne    80486a7 <main+0x14e>
 804869b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
 80486a2:	e8 69 fd ff ff       	call   8048410 <exit@plt> # exit
 80486a7:	8d 44 24 20          	lea    eax,[esp+0x20] # buf1
 80486ab:	89 04 24             	mov    DWORD PTR [esp],eax
 80486ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28] #puts
 80486b2:	ff d0                	call   eax # <- SEGV
 80486b4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
 80486bb:	e8 50 fd ff ff       	call   8048410 <exit@plt> # exit

080486c0 <__libc_csu_init>:
 80486c0:	55                   	push   ebp
 80486c1:	57                   	push   edi
 80486c2:	31 ff                	xor    edi,edi
 80486c4:	56                   	push   esi
 80486c5:	53                   	push   ebx
 80486c6:	e8 b5 fd ff ff       	call   8048480 <__x86.get_pc_thunk.bx>
 80486cb:	81 c3 89 12 00 00    	add    ebx,0x1289
 80486d1:	83 ec 1c             	sub    esp,0x1c
 80486d4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80486d8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80486de:	e8 ad fc ff ff       	call   8048390 <_init>
 80486e3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80486e9:	29 c6                	sub    esi,eax
 80486eb:	c1 fe 02             	sar    esi,0x2
 80486ee:	85 f6                	test   esi,esi
 80486f0:	74 27                	je     8048719 <__libc_csu_init+0x59>
 80486f2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80486f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80486fc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80486ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048703:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048707:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804870b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 8048712:	83 c7 01             	add    edi,0x1
 8048715:	39 f7                	cmp    edi,esi
 8048717:	75 df                	jne    80486f8 <__libc_csu_init+0x38>
 8048719:	83 c4 1c             	add    esp,0x1c
 804871c:	5b                   	pop    ebx
 804871d:	5e                   	pop    esi
 804871e:	5f                   	pop    edi
 804871f:	5d                   	pop    ebp
 8048720:	c3                   	ret    
 8048721:	eb 0d                	jmp    8048730 <__libc_csu_fini>
 8048723:	90                   	nop
 8048724:	90                   	nop
 8048725:	90                   	nop
 8048726:	90                   	nop
 8048727:	90                   	nop
 8048728:	90                   	nop
 8048729:	90                   	nop
 804872a:	90                   	nop
 804872b:	90                   	nop
 804872c:	90                   	nop
 804872d:	90                   	nop
 804872e:	90                   	nop
 804872f:	90                   	nop

08048730 <__libc_csu_fini>:
 8048730:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048734 <_fini>:
 8048734:	53                   	push   ebx
 8048735:	83 ec 08             	sub    esp,0x8
 8048738:	e8 43 fd ff ff       	call   8048480 <__x86.get_pc_thunk.bx>
 804873d:	81 c3 17 12 00 00    	add    ebx,0x1217
 8048743:	83 c4 08             	add    esp,0x8
 8048746:	5b                   	pop    ebx
 8048747:	c3                   	ret    
