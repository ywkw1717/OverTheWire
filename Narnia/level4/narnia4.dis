
narnia4:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

0804832c <_init>:
 804832c:	53                   	push   ebx
 804832d:	83 ec 08             	sub    esp,0x8
 8048330:	e8 ab 00 00 00       	call   80483e0 <__x86.get_pc_thunk.bx>
 8048335:	81 c3 7f 14 00 00    	add    ebx,0x147f
 804833b:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048341:	85 c0                	test   eax,eax
 8048343:	74 05                	je     804834a <_init+0x1e>
 8048345:	e8 26 00 00 00       	call   8048370 <__gmon_start__@plt>
 804834a:	83 c4 08             	add    esp,0x8
 804834d:	5b                   	pop    ebx
 804834e:	c3                   	ret    

セクション .plt の逆アセンブル:

08048350 <strcpy@plt-0x10>:
 8048350:	ff 35 b8 97 04 08    	push   DWORD PTR ds:0x80497b8
 8048356:	ff 25 bc 97 04 08    	jmp    DWORD PTR ds:0x80497bc
 804835c:	00 00                	add    BYTE PTR [eax],al
	...

08048360 <strcpy@plt>:
 8048360:	ff 25 c0 97 04 08    	jmp    DWORD PTR ds:0x80497c0
 8048366:	68 00 00 00 00       	push   0x0
 804836b:	e9 e0 ff ff ff       	jmp    8048350 <_init+0x24>

08048370 <__gmon_start__@plt>:
 8048370:	ff 25 c4 97 04 08    	jmp    DWORD PTR ds:0x80497c4
 8048376:	68 08 00 00 00       	push   0x8
 804837b:	e9 d0 ff ff ff       	jmp    8048350 <_init+0x24>

08048380 <strlen@plt>:
 8048380:	ff 25 c8 97 04 08    	jmp    DWORD PTR ds:0x80497c8
 8048386:	68 10 00 00 00       	push   0x10
 804838b:	e9 c0 ff ff ff       	jmp    8048350 <_init+0x24>

08048390 <__libc_start_main@plt>:
 8048390:	ff 25 cc 97 04 08    	jmp    DWORD PTR ds:0x80497cc
 8048396:	68 18 00 00 00       	push   0x18
 804839b:	e9 b0 ff ff ff       	jmp    8048350 <_init+0x24>

080483a0 <memset@plt>:
 80483a0:	ff 25 d0 97 04 08    	jmp    DWORD PTR ds:0x80497d0
 80483a6:	68 20 00 00 00       	push   0x20
 80483ab:	e9 a0 ff ff ff       	jmp    8048350 <_init+0x24>

セクション .text の逆アセンブル:

080483b0 <_start>:
 80483b0:	31 ed                	xor    ebp,ebp
 80483b2:	5e                   	pop    esi
 80483b3:	89 e1                	mov    ecx,esp
 80483b5:	83 e4 f0             	and    esp,0xfffffff0
 80483b8:	50                   	push   eax
 80483b9:	54                   	push   esp
 80483ba:	52                   	push   edx
 80483bb:	68 c0 85 04 08       	push   0x80485c0
 80483c0:	68 50 85 04 08       	push   0x8048550
 80483c5:	51                   	push   ecx
 80483c6:	56                   	push   esi
 80483c7:	68 ad 84 04 08       	push   0x80484ad
 80483cc:	e8 bf ff ff ff       	call   8048390 <__libc_start_main@plt>
 80483d1:	f4                   	hlt    
 80483d2:	66 90                	xchg   ax,ax
 80483d4:	66 90                	xchg   ax,ax
 80483d6:	66 90                	xchg   ax,ax
 80483d8:	66 90                	xchg   ax,ax
 80483da:	66 90                	xchg   ax,ax
 80483dc:	66 90                	xchg   ax,ax
 80483de:	66 90                	xchg   ax,ax

080483e0 <__x86.get_pc_thunk.bx>:
 80483e0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483e3:	c3                   	ret    
 80483e4:	66 90                	xchg   ax,ax
 80483e6:	66 90                	xchg   ax,ax
 80483e8:	66 90                	xchg   ax,ax
 80483ea:	66 90                	xchg   ax,ax
 80483ec:	66 90                	xchg   ax,ax
 80483ee:	66 90                	xchg   ax,ax

080483f0 <deregister_tm_clones>:
 80483f0:	b8 df 97 04 08       	mov    eax,0x80497df
 80483f5:	2d dc 97 04 08       	sub    eax,0x80497dc
 80483fa:	83 f8 06             	cmp    eax,0x6
 80483fd:	77 01                	ja     8048400 <deregister_tm_clones+0x10>
 80483ff:	c3                   	ret    
 8048400:	b8 00 00 00 00       	mov    eax,0x0
 8048405:	85 c0                	test   eax,eax
 8048407:	74 f6                	je     80483ff <deregister_tm_clones+0xf>
 8048409:	55                   	push   ebp
 804840a:	89 e5                	mov    ebp,esp
 804840c:	83 ec 18             	sub    esp,0x18
 804840f:	c7 04 24 dc 97 04 08 	mov    DWORD PTR [esp],0x80497dc
 8048416:	ff d0                	call   eax
 8048418:	c9                   	leave  
 8048419:	c3                   	ret    
 804841a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048420 <register_tm_clones>:
 8048420:	b8 dc 97 04 08       	mov    eax,0x80497dc
 8048425:	2d dc 97 04 08       	sub    eax,0x80497dc
 804842a:	c1 f8 02             	sar    eax,0x2
 804842d:	89 c2                	mov    edx,eax
 804842f:	c1 ea 1f             	shr    edx,0x1f
 8048432:	01 d0                	add    eax,edx
 8048434:	d1 f8                	sar    eax,1
 8048436:	75 01                	jne    8048439 <register_tm_clones+0x19>
 8048438:	c3                   	ret    
 8048439:	ba 00 00 00 00       	mov    edx,0x0
 804843e:	85 d2                	test   edx,edx
 8048440:	74 f6                	je     8048438 <register_tm_clones+0x18>
 8048442:	55                   	push   ebp
 8048443:	89 e5                	mov    ebp,esp
 8048445:	83 ec 18             	sub    esp,0x18
 8048448:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804844c:	c7 04 24 dc 97 04 08 	mov    DWORD PTR [esp],0x80497dc
 8048453:	ff d2                	call   edx
 8048455:	c9                   	leave  
 8048456:	c3                   	ret    
 8048457:	89 f6                	mov    esi,esi
 8048459:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048460 <__do_global_dtors_aux>:
 8048460:	80 3d e4 97 04 08 00 	cmp    BYTE PTR ds:0x80497e4,0x0
 8048467:	75 13                	jne    804847c <__do_global_dtors_aux+0x1c>
 8048469:	55                   	push   ebp
 804846a:	89 e5                	mov    ebp,esp
 804846c:	83 ec 08             	sub    esp,0x8
 804846f:	e8 7c ff ff ff       	call   80483f0 <deregister_tm_clones>
 8048474:	c6 05 e4 97 04 08 01 	mov    BYTE PTR ds:0x80497e4,0x1
 804847b:	c9                   	leave  
 804847c:	f3 c3                	repz ret 
 804847e:	66 90                	xchg   ax,ax

08048480 <frame_dummy>:
 8048480:	a1 c4 96 04 08       	mov    eax,ds:0x80496c4
 8048485:	85 c0                	test   eax,eax
 8048487:	74 1f                	je     80484a8 <frame_dummy+0x28>
 8048489:	b8 00 00 00 00       	mov    eax,0x0
 804848e:	85 c0                	test   eax,eax
 8048490:	74 16                	je     80484a8 <frame_dummy+0x28>
 8048492:	55                   	push   ebp
 8048493:	89 e5                	mov    ebp,esp
 8048495:	83 ec 18             	sub    esp,0x18
 8048498:	c7 04 24 c4 96 04 08 	mov    DWORD PTR [esp],0x80496c4
 804849f:	ff d0                	call   eax
 80484a1:	c9                   	leave  
 80484a2:	e9 79 ff ff ff       	jmp    8048420 <register_tm_clones>
 80484a7:	90                   	nop
 80484a8:	e9 73 ff ff ff       	jmp    8048420 <register_tm_clones>

080484ad <main>:
 80484ad:	55                   	push   ebp
 80484ae:	89 e5                	mov    ebp,esp
 80484b0:	83 e4 f0             	and    esp,0xfffffff0
 80484b3:	81 ec 20 01 00 00    	sub    esp,0x120
 80484b9:	c7 84 24 1c 01 00 00 	mov    DWORD PTR [esp+0x11c],0x0 # hoge = 0
 80484c0:	00 00 00 00 
 80484c4:	eb 4b                	jmp    8048511 <main+0x64>
 80484c6:	a1 e0 97 04 08       	mov    eax,ds:0x80497e0 # loop start ?
 80484cb:	8b 94 24 1c 01 00 00 	mov    edx,DWORD PTR [esp+0x11c]
 80484d2:	c1 e2 02             	shl    edx,0x2
 80484d5:	01 d0                	add    eax,edx
 80484d7:	8b 00                	mov    eax,DWORD PTR [eax]
 80484d9:	89 04 24             	mov    DWORD PTR [esp],eax
 80484dc:	e8 9f fe ff ff       	call   8048380 <strlen@plt>
 80484e1:	8b 15 e0 97 04 08    	mov    edx,DWORD PTR ds:0x80497e0
 80484e7:	8b 8c 24 1c 01 00 00 	mov    ecx,DWORD PTR [esp+0x11c]
 80484ee:	c1 e1 02             	shl    ecx,0x2
 80484f1:	01 ca                	add    edx,ecx
 80484f3:	8b 12                	mov    edx,DWORD PTR [edx]
 80484f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80484f9:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 8048500:	00 
 8048501:	89 14 24             	mov    DWORD PTR [esp],edx
 8048504:	e8 97 fe ff ff       	call   80483a0 <memset@plt>
 8048509:	83 84 24 1c 01 00 00 	add    DWORD PTR [esp+0x11c],0x1
 8048510:	01 
 8048511:	a1 e0 97 04 08       	mov    eax,ds:0x80497e0 # <environ@@GLIBC_2.0>: 0xffffbfec
 8048516:	8b 94 24 1c 01 00 00 	mov    edx,DWORD PTR [esp+0x11c] # edx = hoge
 804851d:	c1 e2 02             	shl    edx,0x2 # edx を 2bit左シフト？
 8048520:	01 d0                	add    eax,edx # eax += edx
 8048522:	8b 00                	mov    eax,DWORD PTR [eax]
 8048524:	85 c0                	test   eax,eax # eax が0かどうか
 8048526:	75 9e                	jne    80484c6 <main+0x19> # loop end ?
 8048528:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
 804852c:	7e 18                	jle    8048546 <main+0x99>
 804852e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048531:	83 c0 04             	add    eax,0x4
 8048534:	8b 00                	mov    eax,DWORD PTR [eax]
 8048536:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804853a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
 804853e:	89 04 24             	mov    DWORD PTR [esp],eax
 8048541:	e8 1a fe ff ff       	call   8048360 <strcpy@plt>
 8048546:	b8 00 00 00 00       	mov    eax,0x0
 804854b:	c9                   	leave  
 804854c:	c3                   	ret    
 804854d:	66 90                	xchg   ax,ax
 804854f:	90                   	nop

08048550 <__libc_csu_init>:
 8048550:	55                   	push   ebp
 8048551:	57                   	push   edi
 8048552:	31 ff                	xor    edi,edi
 8048554:	56                   	push   esi
 8048555:	53                   	push   ebx
 8048556:	e8 85 fe ff ff       	call   80483e0 <__x86.get_pc_thunk.bx>
 804855b:	81 c3 59 12 00 00    	add    ebx,0x1259
 8048561:	83 ec 1c             	sub    esp,0x1c
 8048564:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048568:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804856e:	e8 b9 fd ff ff       	call   804832c <_init>
 8048573:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048579:	29 c6                	sub    esi,eax
 804857b:	c1 fe 02             	sar    esi,0x2
 804857e:	85 f6                	test   esi,esi
 8048580:	74 27                	je     80485a9 <__libc_csu_init+0x59>
 8048582:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048588:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804858c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804858f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048593:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048597:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804859b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485a2:	83 c7 01             	add    edi,0x1
 80485a5:	39 f7                	cmp    edi,esi
 80485a7:	75 df                	jne    8048588 <__libc_csu_init+0x38>
 80485a9:	83 c4 1c             	add    esp,0x1c
 80485ac:	5b                   	pop    ebx
 80485ad:	5e                   	pop    esi
 80485ae:	5f                   	pop    edi
 80485af:	5d                   	pop    ebp
 80485b0:	c3                   	ret    
 80485b1:	eb 0d                	jmp    80485c0 <__libc_csu_fini>
 80485b3:	90                   	nop
 80485b4:	90                   	nop
 80485b5:	90                   	nop
 80485b6:	90                   	nop
 80485b7:	90                   	nop
 80485b8:	90                   	nop
 80485b9:	90                   	nop
 80485ba:	90                   	nop
 80485bb:	90                   	nop
 80485bc:	90                   	nop
 80485bd:	90                   	nop
 80485be:	90                   	nop
 80485bf:	90                   	nop

080485c0 <__libc_csu_fini>:
 80485c0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080485c4 <_fini>:
 80485c4:	53                   	push   ebx
 80485c5:	83 ec 08             	sub    esp,0x8
 80485c8:	e8 13 fe ff ff       	call   80483e0 <__x86.get_pc_thunk.bx>
 80485cd:	81 c3 e7 11 00 00    	add    ebx,0x11e7
 80485d3:	83 c4 08             	add    esp,0x8
 80485d6:	5b                   	pop    ebx
 80485d7:	c3                   	ret    
