
narnia0:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048354 <_init>:
 8048354:	53                   	push   ebx
 8048355:	83 ec 08             	sub    esp,0x8
 8048358:	e8 d3 00 00 00       	call   8048430 <__x86.get_pc_thunk.bx>
 804835d:	81 c3 a3 1c 00 00    	add    ebx,0x1ca3
 8048363:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048369:	85 c0                	test   eax,eax
 804836b:	74 05                	je     8048372 <_init+0x1e>
 804836d:	e8 4e 00 00 00       	call   80483c0 <__gmon_start__@plt>
 8048372:	83 c4 08             	add    esp,0x8
 8048375:	5b                   	pop    ebx
 8048376:	c3                   	ret    

セクション .plt の逆アセンブル:

08048380 <printf@plt-0x10>:
 8048380:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048386:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804838c:	00 00                	add    BYTE PTR [eax],al
	...

08048390 <printf@plt>:
 8048390:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048396:	68 00 00 00 00       	push   0x0
 804839b:	e9 e0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483a0 <puts@plt>:
 80483a0:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 80483a6:	68 08 00 00 00       	push   0x8
 80483ab:	e9 d0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483b0 <system@plt>:
 80483b0:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 80483b6:	68 10 00 00 00       	push   0x10
 80483bb:	e9 c0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483c0 <__gmon_start__@plt>:
 80483c0:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 80483c6:	68 18 00 00 00       	push   0x18
 80483cb:	e9 b0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483d0 <exit@plt>:
 80483d0:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 80483d6:	68 20 00 00 00       	push   0x20
 80483db:	e9 a0 ff ff ff       	jmp    8048380 <_init+0x2c>

080483e0 <__libc_start_main@plt>:
 80483e0:	ff 25 20 a0 04 08    	jmp    DWORD PTR ds:0x804a020
 80483e6:	68 28 00 00 00       	push   0x28
 80483eb:	e9 90 ff ff ff       	jmp    8048380 <_init+0x2c>

080483f0 <__isoc99_scanf@plt>:
 80483f0:	ff 25 24 a0 04 08    	jmp    DWORD PTR ds:0x804a024
 80483f6:	68 30 00 00 00       	push   0x30
 80483fb:	e9 80 ff ff ff       	jmp    8048380 <_init+0x2c>

セクション .text の逆アセンブル:

08048400 <_start>:
 8048400:	31 ed                	xor    ebp,ebp
 8048402:	5e                   	pop    esi
 8048403:	89 e1                	mov    ecx,esp
 8048405:	83 e4 f0             	and    esp,0xfffffff0
 8048408:	50                   	push   eax
 8048409:	54                   	push   esp
 804840a:	52                   	push   edx
 804840b:	68 10 86 04 08       	push   0x8048610
 8048410:	68 a0 85 04 08       	push   0x80485a0
 8048415:	51                   	push   ecx
 8048416:	56                   	push   esi
 8048417:	68 fd 84 04 08       	push   0x80484fd
 804841c:	e8 bf ff ff ff       	call   80483e0 <__libc_start_main@plt>
 8048421:	f4                   	hlt    
 8048422:	66 90                	xchg   ax,ax
 8048424:	66 90                	xchg   ax,ax
 8048426:	66 90                	xchg   ax,ax
 8048428:	66 90                	xchg   ax,ax
 804842a:	66 90                	xchg   ax,ax
 804842c:	66 90                	xchg   ax,ax
 804842e:	66 90                	xchg   ax,ax

08048430 <__x86.get_pc_thunk.bx>:
 8048430:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048433:	c3                   	ret    
 8048434:	66 90                	xchg   ax,ax
 8048436:	66 90                	xchg   ax,ax
 8048438:	66 90                	xchg   ax,ax
 804843a:	66 90                	xchg   ax,ax
 804843c:	66 90                	xchg   ax,ax
 804843e:	66 90                	xchg   ax,ax

08048440 <deregister_tm_clones>:
 8048440:	b8 33 a0 04 08       	mov    eax,0x804a033
 8048445:	2d 30 a0 04 08       	sub    eax,0x804a030
 804844a:	83 f8 06             	cmp    eax,0x6
 804844d:	77 01                	ja     8048450 <deregister_tm_clones+0x10>
 804844f:	c3                   	ret    
 8048450:	b8 00 00 00 00       	mov    eax,0x0
 8048455:	85 c0                	test   eax,eax
 8048457:	74 f6                	je     804844f <deregister_tm_clones+0xf>
 8048459:	55                   	push   ebp
 804845a:	89 e5                	mov    ebp,esp
 804845c:	83 ec 18             	sub    esp,0x18
 804845f:	c7 04 24 30 a0 04 08 	mov    DWORD PTR [esp],0x804a030
 8048466:	ff d0                	call   eax
 8048468:	c9                   	leave  
 8048469:	c3                   	ret    
 804846a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048470 <register_tm_clones>:
 8048470:	b8 30 a0 04 08       	mov    eax,0x804a030
 8048475:	2d 30 a0 04 08       	sub    eax,0x804a030
 804847a:	c1 f8 02             	sar    eax,0x2
 804847d:	89 c2                	mov    edx,eax
 804847f:	c1 ea 1f             	shr    edx,0x1f
 8048482:	01 d0                	add    eax,edx
 8048484:	d1 f8                	sar    eax,1
 8048486:	75 01                	jne    8048489 <register_tm_clones+0x19>
 8048488:	c3                   	ret    
 8048489:	ba 00 00 00 00       	mov    edx,0x0
 804848e:	85 d2                	test   edx,edx
 8048490:	74 f6                	je     8048488 <register_tm_clones+0x18>
 8048492:	55                   	push   ebp
 8048493:	89 e5                	mov    ebp,esp
 8048495:	83 ec 18             	sub    esp,0x18
 8048498:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804849c:	c7 04 24 30 a0 04 08 	mov    DWORD PTR [esp],0x804a030
 80484a3:	ff d2                	call   edx
 80484a5:	c9                   	leave  
 80484a6:	c3                   	ret    
 80484a7:	89 f6                	mov    esi,esi
 80484a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

080484b0 <__do_global_dtors_aux>:
 80484b0:	80 3d 30 a0 04 08 00 	cmp    BYTE PTR ds:0x804a030,0x0
 80484b7:	75 13                	jne    80484cc <__do_global_dtors_aux+0x1c>
 80484b9:	55                   	push   ebp
 80484ba:	89 e5                	mov    ebp,esp
 80484bc:	83 ec 08             	sub    esp,0x8
 80484bf:	e8 7c ff ff ff       	call   8048440 <deregister_tm_clones>
 80484c4:	c6 05 30 a0 04 08 01 	mov    BYTE PTR ds:0x804a030,0x1
 80484cb:	c9                   	leave  
 80484cc:	f3 c3                	repz ret 
 80484ce:	66 90                	xchg   ax,ax

080484d0 <frame_dummy>:
 80484d0:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 80484d5:	85 c0                	test   eax,eax
 80484d7:	74 1f                	je     80484f8 <frame_dummy+0x28>
 80484d9:	b8 00 00 00 00       	mov    eax,0x0
 80484de:	85 c0                	test   eax,eax
 80484e0:	74 16                	je     80484f8 <frame_dummy+0x28>
 80484e2:	55                   	push   ebp
 80484e3:	89 e5                	mov    ebp,esp
 80484e5:	83 ec 18             	sub    esp,0x18
 80484e8:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 80484ef:	ff d0                	call   eax
 80484f1:	c9                   	leave  
 80484f2:	e9 79 ff ff ff       	jmp    8048470 <register_tm_clones>
 80484f7:	90                   	nop
 80484f8:	e9 73 ff ff ff       	jmp    8048470 <register_tm_clones>

080484fd <main>:
 80484fd:	55                   	push   ebp
 80484fe:	89 e5                	mov    ebp,esp
 8048500:	83 e4 f0             	and    esp,0xfffffff0
 8048503:	83 ec 30             	sub    esp,0x30
 8048506:	c7 44 24 2c 41 41 41 	mov    DWORD PTR [esp+0x2c],0x41414141 # int str = 0x41414141
 804850d:	41 
 804850e:	c7 04 24 30 86 04 08 	mov    DWORD PTR [esp],0x8048630 # char *c1 = "Correct val's value from 0x41414141 -> 0xdeadbeef!"
 8048515:	e8 86 fe ff ff       	call   80483a0 <puts@plt> # puts
 804851a:	c7 04 24 63 86 04 08 	mov    DWORD PTR [esp],0x8048663 # char *c2 = "Here is your chance: "
 8048521:	e8 6a fe ff ff       	call   8048390 <printf@plt> # printf
 8048526:	8d 44 24 18          	lea    eax,[esp+0x18] # buf
 804852a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # buf
 804852e:	c7 04 24 79 86 04 08 	mov    DWORD PTR [esp],0x8048679 # 0x73343225 -> "%24s"
 8048535:	e8 b6 fe ff ff       	call   80483f0 <__isoc99_scanf@plt> # scanf("%24s", buf)
 804853a:	8d 44 24 18          	lea    eax,[esp+0x18] # buf is "esp+0x18"
 804853e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printfの第2引数 buf
 8048542:	c7 04 24 7e 86 04 08 	mov    DWORD PTR [esp],0x804867e # "buf: %s\n"
 8048549:	e8 42 fe ff ff       	call   8048390 <printf@plt> # printf("buf: %s\n", buf)
 804854e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c] # str
 8048552:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printfの第2引数 str
 8048556:	c7 04 24 87 86 04 08 	mov    DWORD PTR [esp],0x8048687 # "vul: 0x%08x\n"
 804855d:	e8 2e fe ff ff       	call   8048390 <printf@plt> # printf("vul: 0x%08x\n", vul)
 8048562:	81 7c 24 2c ef be ad 	cmp    DWORD PTR [esp+0x2c],0xdeadbeef # if(!strcmp(0xdeadbeef, str))
 8048569:	de 
 804856a:	75 0e                	jne    804857a <main+0x7d # 等しくなかったら "WAY OFF!!!!\n" へ
 804856c:	c7 04 24 94 86 04 08 	mov    DWORD PTR [esp],0x8048694 # /bin/sh
 8048573:	e8 38 fe ff ff       	call   80483b0 <system@plt> # system("/bin/sh")
 8048578:	eb 18                	jmp    8048592 <main+0x95>
 804857a:	c7 04 24 9c 86 04 08 	mov    DWORD PTR [esp],0x804869c # "WAY OFF!!!!\n"
 8048581:	e8 1a fe ff ff       	call   80483a0 <puts@plt> # puts("WAY OFF!!!!\n")
 8048586:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1 # exitの引数
 804858d:	e8 3e fe ff ff       	call   80483d0 <exit@plt> # exit(1)
 8048592:	b8 00 00 00 00       	mov    eax,0x0 # return 0
 8048597:	c9                   	leave  
 8048598:	c3                   	ret    
 8048599:	66 90                	xchg   ax,ax
 804859b:	66 90                	xchg   ax,ax
 804859d:	66 90                	xchg   ax,ax
 804859f:	90                   	nop

080485a0 <__libc_csu_init>:
 80485a0:	55                   	push   ebp
 80485a1:	57                   	push   edi
 80485a2:	31 ff                	xor    edi,edi
 80485a4:	56                   	push   esi
 80485a5:	53                   	push   ebx
 80485a6:	e8 85 fe ff ff       	call   8048430 <__x86.get_pc_thunk.bx>
 80485ab:	81 c3 55 1a 00 00    	add    ebx,0x1a55
 80485b1:	83 ec 1c             	sub    esp,0x1c
 80485b4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80485b8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80485be:	e8 91 fd ff ff       	call   8048354 <_init>
 80485c3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80485c9:	29 c6                	sub    esi,eax
 80485cb:	c1 fe 02             	sar    esi,0x2
 80485ce:	85 f6                	test   esi,esi
 80485d0:	74 27                	je     80485f9 <__libc_csu_init+0x59>
 80485d2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80485d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80485dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80485df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80485e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80485e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80485eb:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485f2:	83 c7 01             	add    edi,0x1
 80485f5:	39 f7                	cmp    edi,esi
 80485f7:	75 df                	jne    80485d8 <__libc_csu_init+0x38>
 80485f9:	83 c4 1c             	add    esp,0x1c
 80485fc:	5b                   	pop    ebx
 80485fd:	5e                   	pop    esi
 80485fe:	5f                   	pop    edi
 80485ff:	5d                   	pop    ebp
 8048600:	c3                   	ret    
 8048601:	eb 0d                	jmp    8048610 <__libc_csu_fini>
 8048603:	90                   	nop
 8048604:	90                   	nop
 8048605:	90                   	nop
 8048606:	90                   	nop
 8048607:	90                   	nop
 8048608:	90                   	nop
 8048609:	90                   	nop
 804860a:	90                   	nop
 804860b:	90                   	nop
 804860c:	90                   	nop
 804860d:	90                   	nop
 804860e:	90                   	nop
 804860f:	90                   	nop

08048610 <__libc_csu_fini>:
 8048610:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048614 <_fini>:
 8048614:	53                   	push   ebx
 8048615:	83 ec 08             	sub    esp,0x8
 8048618:	e8 13 fe ff ff       	call   8048430 <__x86.get_pc_thunk.bx>
 804861d:	81 c3 e3 19 00 00    	add    ebx,0x19e3
 8048623:	83 c4 08             	add    esp,0x8
 8048626:	5b                   	pop    ebx
 8048627:	c3                   	ret    
