
narnia8:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

080482b4 <_init>:
 80482b4:	53                   	push   ebx
 80482b5:	83 ec 08             	sub    esp,0x8
 80482b8:	e8 a3 00 00 00       	call   8048360 <__x86.get_pc_thunk.bx>
 80482bd:	81 c3 d3 14 00 00    	add    ebx,0x14d3
 80482c3:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80482c9:	85 c0                	test   eax,eax
 80482cb:	74 05                	je     80482d2 <_init+0x1e>
 80482cd:	e8 2e 00 00 00       	call   8048300 <__gmon_start__@plt>
 80482d2:	83 c4 08             	add    esp,0x8
 80482d5:	5b                   	pop    ebx
 80482d6:	c3                   	ret    

セクション .plt の逆アセンブル:

080482e0 <printf@plt-0x10>:
 80482e0:	ff 35 94 97 04 08    	push   DWORD PTR ds:0x8049794
 80482e6:	ff 25 98 97 04 08    	jmp    DWORD PTR ds:0x8049798
 80482ec:	00 00                	add    BYTE PTR [eax],al
	...

080482f0 <printf@plt>:
 80482f0:	ff 25 9c 97 04 08    	jmp    DWORD PTR ds:0x804979c
 80482f6:	68 00 00 00 00       	push   0x0
 80482fb:	e9 e0 ff ff ff       	jmp    80482e0 <_init+0x2c>

08048300 <__gmon_start__@plt>:
 8048300:	ff 25 a0 97 04 08    	jmp    DWORD PTR ds:0x80497a0
 8048306:	68 08 00 00 00       	push   0x8
 804830b:	e9 d0 ff ff ff       	jmp    80482e0 <_init+0x2c>

08048310 <__libc_start_main@plt>:
 8048310:	ff 25 a4 97 04 08    	jmp    DWORD PTR ds:0x80497a4
 8048316:	68 10 00 00 00       	push   0x10
 804831b:	e9 c0 ff ff ff       	jmp    80482e0 <_init+0x2c>

08048320 <memset@plt>:
 8048320:	ff 25 a8 97 04 08    	jmp    DWORD PTR ds:0x80497a8
 8048326:	68 18 00 00 00       	push   0x18
 804832b:	e9 b0 ff ff ff       	jmp    80482e0 <_init+0x2c>

セクション .text の逆アセンブル:

08048330 <_start>:
 8048330:	31 ed                	xor    ebp,ebp
 8048332:	5e                   	pop    esi
 8048333:	89 e1                	mov    ecx,esp
 8048335:	83 e4 f0             	and    esp,0xfffffff0
 8048338:	50                   	push   eax
 8048339:	54                   	push   esp
 804833a:	52                   	push   edx
 804833b:	68 60 85 04 08       	push   0x8048560
 8048340:	68 f0 84 04 08       	push   0x80484f0
 8048345:	51                   	push   ecx
 8048346:	56                   	push   esi
 8048347:	68 ae 84 04 08       	push   0x80484ae
 804834c:	e8 bf ff ff ff       	call   8048310 <__libc_start_main@plt>
 8048351:	f4                   	hlt    
 8048352:	66 90                	xchg   ax,ax
 8048354:	66 90                	xchg   ax,ax
 8048356:	66 90                	xchg   ax,ax
 8048358:	66 90                	xchg   ax,ax
 804835a:	66 90                	xchg   ax,ax
 804835c:	66 90                	xchg   ax,ax
 804835e:	66 90                	xchg   ax,ax

08048360 <__x86.get_pc_thunk.bx>:
 8048360:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048363:	c3                   	ret    
 8048364:	66 90                	xchg   ax,ax
 8048366:	66 90                	xchg   ax,ax
 8048368:	66 90                	xchg   ax,ax
 804836a:	66 90                	xchg   ax,ax
 804836c:	66 90                	xchg   ax,ax
 804836e:	66 90                	xchg   ax,ax

08048370 <deregister_tm_clones>:
 8048370:	b8 b7 97 04 08       	mov    eax,0x80497b7
 8048375:	2d b4 97 04 08       	sub    eax,0x80497b4
 804837a:	83 f8 06             	cmp    eax,0x6
 804837d:	77 01                	ja     8048380 <deregister_tm_clones+0x10>
 804837f:	c3                   	ret    
 8048380:	b8 00 00 00 00       	mov    eax,0x0
 8048385:	85 c0                	test   eax,eax
 8048387:	74 f6                	je     804837f <deregister_tm_clones+0xf>
 8048389:	55                   	push   ebp
 804838a:	89 e5                	mov    ebp,esp
 804838c:	83 ec 18             	sub    esp,0x18
 804838f:	c7 04 24 b4 97 04 08 	mov    DWORD PTR [esp],0x80497b4
 8048396:	ff d0                	call   eax
 8048398:	c9                   	leave  
 8048399:	c3                   	ret    
 804839a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

080483a0 <register_tm_clones>:
 80483a0:	b8 b4 97 04 08       	mov    eax,0x80497b4
 80483a5:	2d b4 97 04 08       	sub    eax,0x80497b4
 80483aa:	c1 f8 02             	sar    eax,0x2
 80483ad:	89 c2                	mov    edx,eax
 80483af:	c1 ea 1f             	shr    edx,0x1f
 80483b2:	01 d0                	add    eax,edx
 80483b4:	d1 f8                	sar    eax,1
 80483b6:	75 01                	jne    80483b9 <register_tm_clones+0x19>
 80483b8:	c3                   	ret    
 80483b9:	ba 00 00 00 00       	mov    edx,0x0
 80483be:	85 d2                	test   edx,edx
 80483c0:	74 f6                	je     80483b8 <register_tm_clones+0x18>
 80483c2:	55                   	push   ebp
 80483c3:	89 e5                	mov    ebp,esp
 80483c5:	83 ec 18             	sub    esp,0x18
 80483c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80483cc:	c7 04 24 b4 97 04 08 	mov    DWORD PTR [esp],0x80497b4
 80483d3:	ff d2                	call   edx
 80483d5:	c9                   	leave  
 80483d6:	c3                   	ret    
 80483d7:	89 f6                	mov    esi,esi
 80483d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

080483e0 <__do_global_dtors_aux>:
 80483e0:	80 3d b4 97 04 08 00 	cmp    BYTE PTR ds:0x80497b4,0x0
 80483e7:	75 13                	jne    80483fc <__do_global_dtors_aux+0x1c>
 80483e9:	55                   	push   ebp
 80483ea:	89 e5                	mov    ebp,esp
 80483ec:	83 ec 08             	sub    esp,0x8
 80483ef:	e8 7c ff ff ff       	call   8048370 <deregister_tm_clones>
 80483f4:	c6 05 b4 97 04 08 01 	mov    BYTE PTR ds:0x80497b4,0x1
 80483fb:	c9                   	leave  
 80483fc:	f3 c3                	repz ret 
 80483fe:	66 90                	xchg   ax,ax

08048400 <frame_dummy>:
 8048400:	a1 a0 96 04 08       	mov    eax,ds:0x80496a0
 8048405:	85 c0                	test   eax,eax
 8048407:	74 1f                	je     8048428 <frame_dummy+0x28>
 8048409:	b8 00 00 00 00       	mov    eax,0x0
 804840e:	85 c0                	test   eax,eax
 8048410:	74 16                	je     8048428 <frame_dummy+0x28>
 8048412:	55                   	push   ebp
 8048413:	89 e5                	mov    ebp,esp
 8048415:	83 ec 18             	sub    esp,0x18
 8048418:	c7 04 24 a0 96 04 08 	mov    DWORD PTR [esp],0x80496a0
 804841f:	ff d0                	call   eax
 8048421:	c9                   	leave  
 8048422:	e9 79 ff ff ff       	jmp    80483a0 <register_tm_clones>
 8048427:	90                   	nop
 8048428:	e9 73 ff ff ff       	jmp    80483a0 <register_tm_clones>

0804842d <func>:
 804842d:	55                   	push   ebp
 804842e:	89 e5                	mov    ebp,esp
 8048430:	83 ec 38             	sub    esp,0x38
 8048433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
 8048436:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
 8048439:	c7 44 24 08 14 00 00 	mov    DWORD PTR [esp+0x8],0x14 # 20
 8048440:	00 
 8048441:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0 # 0
 8048448:	00 
 8048449:	8d 45 e0             	lea    eax,[ebp-0x20]
 804844c:	89 04 24             	mov    DWORD PTR [esp],eax
 804844f:	e8 cc fe ff ff       	call   8048320 <memset@plt> # memset( , 0, 2)
 8048454:	c7 05 b8 97 04 08 00 	mov    DWORD PTR ds:0x80497b8,0x0 # i = 0 ?
 804845b:	00 00 00 
 804845e:	eb 26                	jmp    8048486 <func+0x59>
 8048460:	a1 b8 97 04 08       	mov    eax,ds:0x80497b8 # loop start
 8048465:	8b 15 b8 97 04 08    	mov    edx,DWORD PTR ds:0x80497b8
 804846b:	89 d1                	mov    ecx,edx
 804846d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
 8048470:	01 ca                	add    edx,ecx
 8048472:	0f b6 12             	movzx  edx,BYTE PTR [edx]
 8048475:	88 54 05 e0          	mov    BYTE PTR [ebp+eax*1-0x20],dl
 8048479:	a1 b8 97 04 08       	mov    eax,ds:0x80497b8
 804847e:	83 c0 01             	add    eax,0x1
 8048481:	a3 b8 97 04 08       	mov    ds:0x80497b8,eax
 8048486:	a1 b8 97 04 08       	mov    eax,ds:0x80497b8
 804848b:	89 c2                	mov    edx,eax
 804848d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc] # eax = argv[1]
 8048490:	01 d0                	add    eax,edx
 8048492:	0f b6 00             	movzx  eax,BYTE PTR [eax]
 8048495:	84 c0                	test   al,al
 8048497:	75 c7                	jne    8048460 <func+0x33> # loop end
 8048499:	8d 45 e0             	lea    eax,[ebp-0x20]
 804849c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # argv[1]
 80484a0:	c7 04 24 80 85 04 08 	mov    DWORD PTR [esp],0x8048580 # "%s\n"
 80484a7:	e8 44 fe ff ff       	call   80482f0 <printf@plt> # printf("%s\n", argv[1])
 80484ac:	c9                   	leave  
 80484ad:	c3                   	ret    

080484ae <main>:
 80484ae:	55                   	push   ebp
 80484af:	89 e5                	mov    ebp,esp
 80484b1:	83 e4 f0             	and    esp,0xfffffff0
 80484b4:	83 ec 10             	sub    esp,0x10
 80484b7:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1 # 引数チェック
 80484bb:	7e 12                	jle    80484cf <main+0x21> # argc == 1 -> 0x80484cf
 80484bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # eax = argv[0]
 80484c0:	83 c0 04             	add    eax,0x4
 80484c3:	8b 00                	mov    eax,DWORD PTR [eax] # eax = argv[1]
 80484c5:	89 04 24             	mov    DWORD PTR [esp],eax
 80484c8:	e8 60 ff ff ff       	call   804842d <func> # func(argv[1])
 80484cd:	eb 15                	jmp    80484e4 <main+0x36> # jmp -> return 0
 80484cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # eax = argv[0]
 80484d2:	8b 00                	mov    eax,DWORD PTR [eax]
 80484d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # eax = argv[0]
 80484d8:	c7 04 24 84 85 04 08 	mov    DWORD PTR [esp],0x8048584 # %s argument\n
 80484df:	e8 0c fe ff ff       	call   80482f0 <printf@plt> # printf("%s argument\n", argv[0]);
 80484e4:	b8 00 00 00 00       	mov    eax,0x0 # return 0;
 80484e9:	c9                   	leave  
 80484ea:	c3                   	ret    
 80484eb:	66 90                	xchg   ax,ax
 80484ed:	66 90                	xchg   ax,ax
 80484ef:	90                   	nop

080484f0 <__libc_csu_init>:
 80484f0:	55                   	push   ebp
 80484f1:	57                   	push   edi
 80484f2:	31 ff                	xor    edi,edi
 80484f4:	56                   	push   esi
 80484f5:	53                   	push   ebx
 80484f6:	e8 65 fe ff ff       	call   8048360 <__x86.get_pc_thunk.bx>
 80484fb:	81 c3 95 12 00 00    	add    ebx,0x1295
 8048501:	83 ec 1c             	sub    esp,0x1c
 8048504:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048508:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804850e:	e8 a1 fd ff ff       	call   80482b4 <_init>
 8048513:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048519:	29 c6                	sub    esi,eax
 804851b:	c1 fe 02             	sar    esi,0x2
 804851e:	85 f6                	test   esi,esi
 8048520:	74 27                	je     8048549 <__libc_csu_init+0x59>
 8048522:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048528:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804852c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804852f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048533:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804853b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 8048542:	83 c7 01             	add    edi,0x1
 8048545:	39 f7                	cmp    edi,esi
 8048547:	75 df                	jne    8048528 <__libc_csu_init+0x38>
 8048549:	83 c4 1c             	add    esp,0x1c
 804854c:	5b                   	pop    ebx
 804854d:	5e                   	pop    esi
 804854e:	5f                   	pop    edi
 804854f:	5d                   	pop    ebp
 8048550:	c3                   	ret    
 8048551:	eb 0d                	jmp    8048560 <__libc_csu_fini>
 8048553:	90                   	nop
 8048554:	90                   	nop
 8048555:	90                   	nop
 8048556:	90                   	nop
 8048557:	90                   	nop
 8048558:	90                   	nop
 8048559:	90                   	nop
 804855a:	90                   	nop
 804855b:	90                   	nop
 804855c:	90                   	nop
 804855d:	90                   	nop
 804855e:	90                   	nop
 804855f:	90                   	nop

08048560 <__libc_csu_fini>:
 8048560:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048564 <_fini>:
 8048564:	53                   	push   ebx
 8048565:	83 ec 08             	sub    esp,0x8
 8048568:	e8 f3 fd ff ff       	call   8048360 <__x86.get_pc_thunk.bx>
 804856d:	81 c3 23 12 00 00    	add    ebx,0x1223
 8048573:	83 c4 08             	add    esp,0x8
 8048576:	5b                   	pop    ebx
 8048577:	c3                   	ret    
