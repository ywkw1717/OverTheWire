
narnia3:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048350 <_init>:
 8048350:	53                   	push   ebx
 8048351:	83 ec 08             	sub    esp,0x8
 8048354:	e8 f7 00 00 00       	call   8048450 <__x86.get_pc_thunk.bx>
 8048359:	81 c3 03 16 00 00    	add    ebx,0x1603
 804835f:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048365:	85 c0                	test   eax,eax
 8048367:	74 05                	je     804836e <_init+0x1e>
 8048369:	e8 52 00 00 00       	call   80483c0 <__gmon_start__@plt>
 804836e:	83 c4 08             	add    esp,0x8
 8048371:	5b                   	pop    ebx
 8048372:	c3                   	ret    

セクション .plt の逆アセンブル:

08048380 <read@plt-0x10>:
 8048380:	ff 35 60 99 04 08    	push   DWORD PTR ds:0x8049960
 8048386:	ff 25 64 99 04 08    	jmp    DWORD PTR ds:0x8049964
 804838c:	00 00                	add    BYTE PTR [eax],al
	...

08048390 <read@plt>:
 8048390:	ff 25 68 99 04 08    	jmp    DWORD PTR ds:0x8049968
 8048396:	68 00 00 00 00       	push   0x0
 804839b:	e9 e0 ff ff ff       	jmp    8048380 <_init+0x30>

080483a0 <printf@plt>:
 80483a0:	ff 25 6c 99 04 08    	jmp    DWORD PTR ds:0x804996c
 80483a6:	68 08 00 00 00       	push   0x8
 80483ab:	e9 d0 ff ff ff       	jmp    8048380 <_init+0x30>

080483b0 <strcpy@plt>:
 80483b0:	ff 25 70 99 04 08    	jmp    DWORD PTR ds:0x8049970
 80483b6:	68 10 00 00 00       	push   0x10
 80483bb:	e9 c0 ff ff ff       	jmp    8048380 <_init+0x30>

080483c0 <__gmon_start__@plt>:
 80483c0:	ff 25 74 99 04 08    	jmp    DWORD PTR ds:0x8049974
 80483c6:	68 18 00 00 00       	push   0x18
 80483cb:	e9 b0 ff ff ff       	jmp    8048380 <_init+0x30>

080483d0 <exit@plt>:
 80483d0:	ff 25 78 99 04 08    	jmp    DWORD PTR ds:0x8049978
 80483d6:	68 20 00 00 00       	push   0x20
 80483db:	e9 a0 ff ff ff       	jmp    8048380 <_init+0x30>

080483e0 <open@plt>:
 80483e0:	ff 25 7c 99 04 08    	jmp    DWORD PTR ds:0x804997c
 80483e6:	68 28 00 00 00       	push   0x28
 80483eb:	e9 90 ff ff ff       	jmp    8048380 <_init+0x30>

080483f0 <__libc_start_main@plt>:
 80483f0:	ff 25 80 99 04 08    	jmp    DWORD PTR ds:0x8049980
 80483f6:	68 30 00 00 00       	push   0x30
 80483fb:	e9 80 ff ff ff       	jmp    8048380 <_init+0x30>

08048400 <write@plt>:
 8048400:	ff 25 84 99 04 08    	jmp    DWORD PTR ds:0x8049984
 8048406:	68 38 00 00 00       	push   0x38
 804840b:	e9 70 ff ff ff       	jmp    8048380 <_init+0x30>

08048410 <close@plt>:
 8048410:	ff 25 88 99 04 08    	jmp    DWORD PTR ds:0x8049988
 8048416:	68 40 00 00 00       	push   0x40
 804841b:	e9 60 ff ff ff       	jmp    8048380 <_init+0x30>

セクション .text の逆アセンブル:

08048420 <_start>:
 8048420:	31 ed                	xor    ebp,ebp
 8048422:	5e                   	pop    esi
 8048423:	89 e1                	mov    ecx,esp
 8048425:	83 e4 f0             	and    esp,0xfffffff0
 8048428:	50                   	push   eax
 8048429:	54                   	push   esp
 804842a:	52                   	push   edx
 804842b:	68 f0 86 04 08       	push   0x80486f0
 8048430:	68 80 86 04 08       	push   0x8048680
 8048435:	51                   	push   ecx
 8048436:	56                   	push   esi
 8048437:	68 1d 85 04 08       	push   0x804851d
 804843c:	e8 af ff ff ff       	call   80483f0 <__libc_start_main@plt>
 8048441:	f4                   	hlt    
 8048442:	66 90                	xchg   ax,ax
 8048444:	66 90                	xchg   ax,ax
 8048446:	66 90                	xchg   ax,ax
 8048448:	66 90                	xchg   ax,ax
 804844a:	66 90                	xchg   ax,ax
 804844c:	66 90                	xchg   ax,ax
 804844e:	66 90                	xchg   ax,ax

08048450 <__x86.get_pc_thunk.bx>:
 8048450:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048453:	c3                   	ret    
 8048454:	66 90                	xchg   ax,ax
 8048456:	66 90                	xchg   ax,ax
 8048458:	66 90                	xchg   ax,ax
 804845a:	66 90                	xchg   ax,ax
 804845c:	66 90                	xchg   ax,ax
 804845e:	66 90                	xchg   ax,ax

08048460 <deregister_tm_clones>:
 8048460:	b8 97 99 04 08       	mov    eax,0x8049997
 8048465:	2d 94 99 04 08       	sub    eax,0x8049994
 804846a:	83 f8 06             	cmp    eax,0x6
 804846d:	77 01                	ja     8048470 <deregister_tm_clones+0x10>
 804846f:	c3                   	ret    
 8048470:	b8 00 00 00 00       	mov    eax,0x0
 8048475:	85 c0                	test   eax,eax
 8048477:	74 f6                	je     804846f <deregister_tm_clones+0xf>
 8048479:	55                   	push   ebp
 804847a:	89 e5                	mov    ebp,esp
 804847c:	83 ec 18             	sub    esp,0x18
 804847f:	c7 04 24 94 99 04 08 	mov    DWORD PTR [esp],0x8049994
 8048486:	ff d0                	call   eax
 8048488:	c9                   	leave  
 8048489:	c3                   	ret    
 804848a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048490 <register_tm_clones>:
 8048490:	b8 94 99 04 08       	mov    eax,0x8049994
 8048495:	2d 94 99 04 08       	sub    eax,0x8049994
 804849a:	c1 f8 02             	sar    eax,0x2
 804849d:	89 c2                	mov    edx,eax
 804849f:	c1 ea 1f             	shr    edx,0x1f
 80484a2:	01 d0                	add    eax,edx
 80484a4:	d1 f8                	sar    eax,1
 80484a6:	75 01                	jne    80484a9 <register_tm_clones+0x19>
 80484a8:	c3                   	ret    
 80484a9:	ba 00 00 00 00       	mov    edx,0x0
 80484ae:	85 d2                	test   edx,edx
 80484b0:	74 f6                	je     80484a8 <register_tm_clones+0x18>
 80484b2:	55                   	push   ebp
 80484b3:	89 e5                	mov    ebp,esp
 80484b5:	83 ec 18             	sub    esp,0x18
 80484b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80484bc:	c7 04 24 94 99 04 08 	mov    DWORD PTR [esp],0x8049994
 80484c3:	ff d2                	call   edx
 80484c5:	c9                   	leave  
 80484c6:	c3                   	ret    
 80484c7:	89 f6                	mov    esi,esi
 80484c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

080484d0 <__do_global_dtors_aux>:
 80484d0:	80 3d 94 99 04 08 00 	cmp    BYTE PTR ds:0x8049994,0x0
 80484d7:	75 13                	jne    80484ec <__do_global_dtors_aux+0x1c>
 80484d9:	55                   	push   ebp
 80484da:	89 e5                	mov    ebp,esp
 80484dc:	83 ec 08             	sub    esp,0x8
 80484df:	e8 7c ff ff ff       	call   8048460 <deregister_tm_clones>
 80484e4:	c6 05 94 99 04 08 01 	mov    BYTE PTR ds:0x8049994,0x1
 80484eb:	c9                   	leave  
 80484ec:	f3 c3                	repz ret 
 80484ee:	66 90                	xchg   ax,ax

080484f0 <frame_dummy>:
 80484f0:	a1 6c 98 04 08       	mov    eax,ds:0x804986c
 80484f5:	85 c0                	test   eax,eax
 80484f7:	74 1f                	je     8048518 <frame_dummy+0x28>
 80484f9:	b8 00 00 00 00       	mov    eax,0x0
 80484fe:	85 c0                	test   eax,eax
 8048500:	74 16                	je     8048518 <frame_dummy+0x28>
 8048502:	55                   	push   ebp
 8048503:	89 e5                	mov    ebp,esp
 8048505:	83 ec 18             	sub    esp,0x18
 8048508:	c7 04 24 6c 98 04 08 	mov    DWORD PTR [esp],0x804986c
 804850f:	ff d0                	call   eax
 8048511:	c9                   	leave  
 8048512:	e9 79 ff ff ff       	jmp    8048490 <register_tm_clones>
 8048517:	90                   	nop
 8048518:	e9 73 ff ff ff       	jmp    8048490 <register_tm_clones>

0804851d <main>:
 804851d:	55                   	push   ebp
 804851e:	89 e5                	mov    ebp,esp
 8048520:	83 e4 f0             	and    esp,0xfffffff0
 8048523:	83 ec 70             	sub    esp,0x70
 8048526:	c7 44 24 58 2f 64 65 	mov    DWORD PTR [esp+0x58],0x7665642f # /dev
 804852d:	76 
 804852e:	c7 44 24 5c 2f 6e 75 	mov    DWORD PTR [esp+0x5c],0x6c756e2f # /nul
 8048535:	6c 
 8048536:	c7 44 24 60 6c 00 00 	mov    DWORD PTR [esp+0x60],0x6c # l
 804853d:	00 
 804853e:	c7 44 24 64 00 00 00 	mov    DWORD PTR [esp+0x64],0x0 # null string
 8048545:	00 
 8048546:	83 7d 08 02          	cmp    DWORD PTR [ebp+0x8],0x2 # argv == 2
 804854a:	74 21                	je     804856d <main+0x50>
 804854c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # ./narnia3のアドレス
 804854f:	8b 00                	mov    eax,DWORD PTR [eax] # eax = ./narnia3の値
 8048551:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # argv[0]
 8048555:	c7 04 24 10 87 04 08 	mov    DWORD PTR [esp],0x8048710 # "usage, %s file, will send contents of file 2 /dev/null\n"
 804855c:	e8 3f fe ff ff       	call   80483a0 <printf@plt> # printf("usage, %s file, will send contents of file 2 /dev/null\n", argv[0])
 8048561:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
 8048568:	e8 63 fe ff ff       	call   80483d0 <exit@plt> # exit
 804856d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # eax = argv[0]
 8048570:	83 c0 04             	add    eax,0x4 # eax = eax + 4 -> eax = argv[1]
 8048573:	8b 00                	mov    eax,DWORD PTR [eax] # eax = argv[1]の値
 8048575:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # strcpyの第2引数にeax
 8048579:	8d 44 24 38          	lea    eax,[esp+0x38] # esp+0x38?
 804857d:	89 04 24             	mov    DWORD PTR [esp],eax # strcpyの第1引数にifile
 8048580:	e8 2b fe ff ff       	call   80483b0 <strcpy@plt> # strcpy(ifile, argv[1])
 8048585:	c7 44 24 04 02 00 00 	mov    DWORD PTR [esp+0x4],0x2
 804858c:	00 
 804858d:	8d 44 24 58          	lea    eax,[esp+0x58] # ofile
 8048591:	89 04 24             	mov    DWORD PTR [esp],eax
 8048594:	e8 47 fe ff ff       	call   80483e0 <open@plt> # open(ofile)
 8048599:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
 804859d:	83 7c 24 6c 00       	cmp    DWORD PTR [esp+0x6c],0x0
 80485a2:	79 20                	jns    80485c4 <main+0xa7>
 80485a4:	8d 44 24 58          	lea    eax,[esp+0x58] # eax = argv[1]
 80485a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printf第2引数 = eax
 80485ac:	c7 04 24 48 87 04 08 	mov    DWORD PTR [esp],0x8048748
 80485b3:	e8 e8 fd ff ff       	call   80483a0 <printf@plt>
 80485b8:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
 80485bf:	e8 0c fe ff ff       	call   80483d0 <exit@plt> # exit
 80485c4:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
 80485cb:	00 
 80485cc:	8d 44 24 38          	lea    eax,[esp+0x38] # ifile
 80485d0:	89 04 24             	mov    DWORD PTR [esp],eax
 80485d3:	e8 08 fe ff ff       	call   80483e0 <open@plt> # open(ifile)
 80485d8:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
 80485dc:	83 7c 24 68 00       	cmp    DWORD PTR [esp+0x68],0x0 # ファイルが存在するかどうか
 80485e1:	79 20                	jns    8048603 <main+0xe6>
 80485e3:	8d 44 24 38          	lea    eax,[esp+0x38]
 80485e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printf第2引数 = eax
 80485eb:	c7 04 24 48 87 04 08 	mov    DWORD PTR [esp],0x8048748 # "error opening %s\n"
 80485f2:	e8 a9 fd ff ff       	call   80483a0 <printf@plt> # printf("error opening %s\n", argv[1])
 80485f7:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
 80485fe:	e8 cd fd ff ff       	call   80483d0 <exit@plt> # exit
 8048603:	c7 44 24 08 1f 00 00 	mov    DWORD PTR [esp+0x8],0x1f # readの第3引数？ = 0x1f
 804860a:	00 
 804860b:	8d 44 24 18          	lea    eax,[esp+0x18] # charのなにか？
 804860f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # readの第2引数
 8048613:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
 8048617:	89 04 24             	mov    DWORD PTR [esp],eax # readの第1引数
 804861a:	e8 71 fd ff ff       	call   8048390 <read@plt> # read(..., ..., ...)
 804861f:	c7 44 24 08 1f 00 00 	mov    DWORD PTR [esp+0x8],0x1f # writeの第3引数？ = 0x1f
 8048626:	00 
 8048627:	8d 44 24 18          	lea    eax,[esp+0x18] # charのなにか？
 804862b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # writeの第2引数
 804862f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
 8048633:	89 04 24             	mov    DWORD PTR [esp],eax # writeの第1引数
 8048636:	e8 c5 fd ff ff       	call   8048400 <write@plt> # write(..., ..., ...)
 804863b:	8d 44 24 58          	lea    eax,[esp+0x58] # /dev/null
 804863f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax # printfの第3引数
 8048643:	8d 44 24 38          	lea    eax,[esp+0x38] # argv[1]
 8048647:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printfの第2引数
 804864b:	c7 04 24 5c 87 04 08 	mov    DWORD PTR [esp],0x804875c # "copied contents of %s to a safer place... (%s)\n"
 8048652:	e8 49 fd ff ff       	call   80483a0 <printf@plt> # printf("copied contents of %s to a safer place... (%s)\n", argv[1], "/dev/null")
 8048657:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
 804865b:	89 04 24             	mov    DWORD PTR [esp],eax
 804865e:	e8 ad fd ff ff       	call   8048410 <close@plt>
 8048663:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
 8048667:	89 04 24             	mov    DWORD PTR [esp],eax
 804866a:	e8 a1 fd ff ff       	call   8048410 <close@plt>
 804866f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
 8048676:	e8 55 fd ff ff       	call   80483d0 <exit@plt>
 804867b:	66 90                	xchg   ax,ax
 804867d:	66 90                	xchg   ax,ax
 804867f:	90                   	nop

08048680 <__libc_csu_init>:
 8048680:	55                   	push   ebp
 8048681:	57                   	push   edi
 8048682:	31 ff                	xor    edi,edi
 8048684:	56                   	push   esi
 8048685:	53                   	push   ebx
 8048686:	e8 c5 fd ff ff       	call   8048450 <__x86.get_pc_thunk.bx>
 804868b:	81 c3 d1 12 00 00    	add    ebx,0x12d1
 8048691:	83 ec 1c             	sub    esp,0x1c
 8048694:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048698:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804869e:	e8 ad fc ff ff       	call   8048350 <_init>
 80486a3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80486a9:	29 c6                	sub    esi,eax
 80486ab:	c1 fe 02             	sar    esi,0x2
 80486ae:	85 f6                	test   esi,esi
 80486b0:	74 27                	je     80486d9 <__libc_csu_init+0x59>
 80486b2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80486b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80486bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80486bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80486c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80486c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80486cb:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80486d2:	83 c7 01             	add    edi,0x1
 80486d5:	39 f7                	cmp    edi,esi
 80486d7:	75 df                	jne    80486b8 <__libc_csu_init+0x38>
 80486d9:	83 c4 1c             	add    esp,0x1c
 80486dc:	5b                   	pop    ebx
 80486dd:	5e                   	pop    esi
 80486de:	5f                   	pop    edi
 80486df:	5d                   	pop    ebp
 80486e0:	c3                   	ret    
 80486e1:	eb 0d                	jmp    80486f0 <__libc_csu_fini>
 80486e3:	90                   	nop
 80486e4:	90                   	nop
 80486e5:	90                   	nop
 80486e6:	90                   	nop
 80486e7:	90                   	nop
 80486e8:	90                   	nop
 80486e9:	90                   	nop
 80486ea:	90                   	nop
 80486eb:	90                   	nop
 80486ec:	90                   	nop
 80486ed:	90                   	nop
 80486ee:	90                   	nop
 80486ef:	90                   	nop

080486f0 <__libc_csu_fini>:
 80486f0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080486f4 <_fini>:
 80486f4:	53                   	push   ebx
 80486f5:	83 ec 08             	sub    esp,0x8
 80486f8:	e8 53 fd ff ff       	call   8048450 <__x86.get_pc_thunk.bx>
 80486fd:	81 c3 5f 12 00 00    	add    ebx,0x125f
 8048703:	83 c4 08             	add    esp,0x8
 8048706:	5b                   	pop    ebx
 8048707:	c3                   	ret    
