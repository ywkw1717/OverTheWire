
narnia2:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

080482d4 <_init>:
 80482d4:	53                   	push   ebx
 80482d5:	83 ec 08             	sub    esp,0x8
 80482d8:	e8 b3 00 00 00       	call   8048390 <__x86.get_pc_thunk.bx>
 80482dd:	81 c3 6f 14 00 00    	add    ebx,0x146f
 80482e3:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 80482e9:	85 c0                	test   eax,eax
 80482eb:	74 05                	je     80482f2 <_init+0x1e>
 80482ed:	e8 3e 00 00 00       	call   8048330 <__gmon_start__@plt>
 80482f2:	83 c4 08             	add    esp,0x8
 80482f5:	5b                   	pop    ebx
 80482f6:	c3                   	ret    

セクション .plt の逆アセンブル:

08048300 <printf@plt-0x10>:
 8048300:	ff 35 50 97 04 08    	push   DWORD PTR ds:0x8049750
 8048306:	ff 25 54 97 04 08    	jmp    DWORD PTR ds:0x8049754
 804830c:	00 00                	add    BYTE PTR [eax],al
	...

08048310 <printf@plt>:
 8048310:	ff 25 58 97 04 08    	jmp    DWORD PTR ds:0x8049758
 8048316:	68 00 00 00 00       	push   0x0
 804831b:	e9 e0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048320 <strcpy@plt>:
 8048320:	ff 25 5c 97 04 08    	jmp    DWORD PTR ds:0x804975c
 8048326:	68 08 00 00 00       	push   0x8
 804832b:	e9 d0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048330 <__gmon_start__@plt>:
 8048330:	ff 25 60 97 04 08    	jmp    DWORD PTR ds:0x8049760
 8048336:	68 10 00 00 00       	push   0x10
 804833b:	e9 c0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048340 <exit@plt>:
 8048340:	ff 25 64 97 04 08    	jmp    DWORD PTR ds:0x8049764
 8048346:	68 18 00 00 00       	push   0x18
 804834b:	e9 b0 ff ff ff       	jmp    8048300 <_init+0x2c>

08048350 <__libc_start_main@plt>:
 8048350:	ff 25 68 97 04 08    	jmp    DWORD PTR ds:0x8049768
 8048356:	68 20 00 00 00       	push   0x20
 804835b:	e9 a0 ff ff ff       	jmp    8048300 <_init+0x2c>

セクション .text の逆アセンブル:

08048360 <_start>:
 8048360:	31 ed                	xor    ebp,ebp
 8048362:	5e                   	pop    esi
 8048363:	89 e1                	mov    ecx,esp
 8048365:	83 e4 f0             	and    esp,0xfffffff0
 8048368:	50                   	push   eax
 8048369:	54                   	push   esp
 804836a:	52                   	push   edx
 804836b:	68 40 85 04 08       	push   0x8048540
 8048370:	68 d0 84 04 08       	push   0x80484d0
 8048375:	51                   	push   ecx
 8048376:	56                   	push   esi
 8048377:	68 5d 84 04 08       	push   0x804845d
 804837c:	e8 cf ff ff ff       	call   8048350 <__libc_start_main@plt>
 8048381:	f4                   	hlt    
 8048382:	66 90                	xchg   ax,ax
 8048384:	66 90                	xchg   ax,ax
 8048386:	66 90                	xchg   ax,ax
 8048388:	66 90                	xchg   ax,ax
 804838a:	66 90                	xchg   ax,ax
 804838c:	66 90                	xchg   ax,ax
 804838e:	66 90                	xchg   ax,ax

08048390 <__x86.get_pc_thunk.bx>:
 8048390:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048393:	c3                   	ret    
 8048394:	66 90                	xchg   ax,ax
 8048396:	66 90                	xchg   ax,ax
 8048398:	66 90                	xchg   ax,ax
 804839a:	66 90                	xchg   ax,ax
 804839c:	66 90                	xchg   ax,ax
 804839e:	66 90                	xchg   ax,ax

080483a0 <deregister_tm_clones>:
 80483a0:	b8 77 97 04 08       	mov    eax,0x8049777
 80483a5:	2d 74 97 04 08       	sub    eax,0x8049774
 80483aa:	83 f8 06             	cmp    eax,0x6
 80483ad:	77 01                	ja     80483b0 <deregister_tm_clones+0x10>
 80483af:	c3                   	ret    
 80483b0:	b8 00 00 00 00       	mov    eax,0x0
 80483b5:	85 c0                	test   eax,eax
 80483b7:	74 f6                	je     80483af <deregister_tm_clones+0xf>
 80483b9:	55                   	push   ebp
 80483ba:	89 e5                	mov    ebp,esp
 80483bc:	83 ec 18             	sub    esp,0x18
 80483bf:	c7 04 24 74 97 04 08 	mov    DWORD PTR [esp],0x8049774
 80483c6:	ff d0                	call   eax
 80483c8:	c9                   	leave  
 80483c9:	c3                   	ret    
 80483ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

080483d0 <register_tm_clones>:
 80483d0:	b8 74 97 04 08       	mov    eax,0x8049774
 80483d5:	2d 74 97 04 08       	sub    eax,0x8049774
 80483da:	c1 f8 02             	sar    eax,0x2
 80483dd:	89 c2                	mov    edx,eax
 80483df:	c1 ea 1f             	shr    edx,0x1f
 80483e2:	01 d0                	add    eax,edx
 80483e4:	d1 f8                	sar    eax,1
 80483e6:	75 01                	jne    80483e9 <register_tm_clones+0x19>
 80483e8:	c3                   	ret    
 80483e9:	ba 00 00 00 00       	mov    edx,0x0
 80483ee:	85 d2                	test   edx,edx
 80483f0:	74 f6                	je     80483e8 <register_tm_clones+0x18>
 80483f2:	55                   	push   ebp
 80483f3:	89 e5                	mov    ebp,esp
 80483f5:	83 ec 18             	sub    esp,0x18
 80483f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80483fc:	c7 04 24 74 97 04 08 	mov    DWORD PTR [esp],0x8049774
 8048403:	ff d2                	call   edx
 8048405:	c9                   	leave  
 8048406:	c3                   	ret    
 8048407:	89 f6                	mov    esi,esi
 8048409:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048410 <__do_global_dtors_aux>:
 8048410:	80 3d 74 97 04 08 00 	cmp    BYTE PTR ds:0x8049774,0x0
 8048417:	75 13                	jne    804842c <__do_global_dtors_aux+0x1c>
 8048419:	55                   	push   ebp
 804841a:	89 e5                	mov    ebp,esp
 804841c:	83 ec 08             	sub    esp,0x8
 804841f:	e8 7c ff ff ff       	call   80483a0 <deregister_tm_clones>
 8048424:	c6 05 74 97 04 08 01 	mov    BYTE PTR ds:0x8049774,0x1
 804842b:	c9                   	leave  
 804842c:	f3 c3                	repz ret 
 804842e:	66 90                	xchg   ax,ax

08048430 <frame_dummy>:
 8048430:	a1 5c 96 04 08       	mov    eax,ds:0x804965c
 8048435:	85 c0                	test   eax,eax
 8048437:	74 1f                	je     8048458 <frame_dummy+0x28>
 8048439:	b8 00 00 00 00       	mov    eax,0x0
 804843e:	85 c0                	test   eax,eax
 8048440:	74 16                	je     8048458 <frame_dummy+0x28>
 8048442:	55                   	push   ebp
 8048443:	89 e5                	mov    ebp,esp
 8048445:	83 ec 18             	sub    esp,0x18
 8048448:	c7 04 24 5c 96 04 08 	mov    DWORD PTR [esp],0x804965c
 804844f:	ff d0                	call   eax
 8048451:	c9                   	leave  
 8048452:	e9 79 ff ff ff       	jmp    80483d0 <register_tm_clones>
 8048457:	90                   	nop
 8048458:	e9 73 ff ff ff       	jmp    80483d0 <register_tm_clones>

0804845d <main>: # ./narnia2 AAAA
 804845d:	55                   	push   ebp
 804845e:	89 e5                	mov    ebp,esp
 8048460:	83 e4 f0             	and    esp,0xfffffff0
 8048463:	81 ec 90 00 00 00    	sub    esp,0x90
 8048469:	83 7d 08 01          	cmp    DWORD PTR [ebp+0x8],0x1
 804846d:	75 21                	jne    8048490 <main+0x33> # コマンドライン引数が1以下でなかったら0x8048490へ
 804846f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
 8048472:	8b 00                	mov    eax,DWORD PTR [eax]
 8048474:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048478:	c7 04 24 60 85 04 08 	mov    DWORD PTR [esp],0x8048560
 804847f:	e8 8c fe ff ff       	call   8048310 <printf@plt>
 8048484:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
 804848b:	e8 b0 fe ff ff       	call   8048340 <exit@plt>
 8048490:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # eax = /home/....../narnia2
 8048493:	83 c0 04             	add    eax,0x4 # eax = eax + 4; -> eax = "AAAA"
 8048496:	8b 00                	mov    eax,DWORD PTR [eax] # eax = "AAAA" (値として）
 8048498:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # argv[1]
 804849c:	8d 44 24 10          	lea    eax,[esp+0x10] # buf
 80484a0:	89 04 24             	mov    DWORD PTR [esp],eax # buf
 80484a3:	e8 78 fe ff ff       	call   8048320 <strcpy@plt> # strcpy(buf, argv[1])
 80484a8:	8d 44 24 10          	lea    eax,[esp+0x10] # buf
 80484ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax # printfの第2引数 = buf
 80484b0:	c7 04 24 74 85 04 08 	mov    DWORD PTR [esp],0x8048574 # "%s"
 80484b7:	e8 54 fe ff ff       	call   8048310 <printf@plt> # printf("%s",buf)
 80484bc:	b8 00 00 00 00       	mov    eax,0x0 # return 0
 80484c1:	c9                   	leave  
 80484c2:	c3                   	ret    
 80484c3:	66 90                	xchg   ax,ax
 80484c5:	66 90                	xchg   ax,ax
 80484c7:	66 90                	xchg   ax,ax
 80484c9:	66 90                	xchg   ax,ax
 80484cb:	66 90                	xchg   ax,ax
 80484cd:	66 90                	xchg   ax,ax
 80484cf:	90                   	nop

080484d0 <__libc_csu_init>:
 80484d0:	55                   	push   ebp
 80484d1:	57                   	push   edi
 80484d2:	31 ff                	xor    edi,edi
 80484d4:	56                   	push   esi
 80484d5:	53                   	push   ebx
 80484d6:	e8 b5 fe ff ff       	call   8048390 <__x86.get_pc_thunk.bx>
 80484db:	81 c3 71 12 00 00    	add    ebx,0x1271
 80484e1:	83 ec 1c             	sub    esp,0x1c
 80484e4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80484e8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80484ee:	e8 e1 fd ff ff       	call   80482d4 <_init>
 80484f3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80484f9:	29 c6                	sub    esi,eax
 80484fb:	c1 fe 02             	sar    esi,0x2
 80484fe:	85 f6                	test   esi,esi
 8048500:	74 27                	je     8048529 <__libc_csu_init+0x59>
 8048502:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048508:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804850c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804850f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048513:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048517:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804851b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 8048522:	83 c7 01             	add    edi,0x1
 8048525:	39 f7                	cmp    edi,esi
 8048527:	75 df                	jne    8048508 <__libc_csu_init+0x38>
 8048529:	83 c4 1c             	add    esp,0x1c
 804852c:	5b                   	pop    ebx
 804852d:	5e                   	pop    esi
 804852e:	5f                   	pop    edi
 804852f:	5d                   	pop    ebp
 8048530:	c3                   	ret    
 8048531:	eb 0d                	jmp    8048540 <__libc_csu_fini>
 8048533:	90                   	nop
 8048534:	90                   	nop
 8048535:	90                   	nop
 8048536:	90                   	nop
 8048537:	90                   	nop
 8048538:	90                   	nop
 8048539:	90                   	nop
 804853a:	90                   	nop
 804853b:	90                   	nop
 804853c:	90                   	nop
 804853d:	90                   	nop
 804853e:	90                   	nop
 804853f:	90                   	nop

08048540 <__libc_csu_fini>:
 8048540:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048544 <_fini>:
 8048544:	53                   	push   ebx
 8048545:	83 ec 08             	sub    esp,0x8
 8048548:	e8 43 fe ff ff       	call   8048390 <__x86.get_pc_thunk.bx>
 804854d:	81 c3 ff 11 00 00    	add    ebx,0x11ff
 8048553:	83 c4 08             	add    esp,0x8
 8048556:	5b                   	pop    ebx
 8048557:	c3                   	ret    
