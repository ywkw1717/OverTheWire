
narnia1:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

080482f0 <_init>:
 80482f0:	53                   	push   ebx
 80482f1:	83 ec 08             	sub    esp,0x8
 80482f4:	e8 b7 00 00 00       	call   80483b0 <__x86.get_pc_thunk.bx>
 80482f9:	81 c3 07 1d 00 00    	add    ebx,0x1d07
 80482ff:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048305:	85 c0                	test   eax,eax
 8048307:	74 05                	je     804830e <_init+0x1e>
 8048309:	e8 42 00 00 00       	call   8048350 <__gmon_start__@plt>
 804830e:	83 c4 08             	add    esp,0x8
 8048311:	5b                   	pop    ebx
 8048312:	c3                   	ret    

セクション .plt の逆アセンブル:

08048320 <getenv@plt-0x10>:
 8048320:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048326:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804832c:	00 00                	add    BYTE PTR [eax],al
	...

08048330 <getenv@plt>:
 8048330:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048336:	68 00 00 00 00       	push   0x0
 804833b:	e9 e0 ff ff ff       	jmp    8048320 <_init+0x30>

08048340 <puts@plt>:
 8048340:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048346:	68 08 00 00 00       	push   0x8
 804834b:	e9 d0 ff ff ff       	jmp    8048320 <_init+0x30>

08048350 <__gmon_start__@plt>:
 8048350:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048356:	68 10 00 00 00       	push   0x10
 804835b:	e9 c0 ff ff ff       	jmp    8048320 <_init+0x30>

08048360 <exit@plt>:
 8048360:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 8048366:	68 18 00 00 00       	push   0x18
 804836b:	e9 b0 ff ff ff       	jmp    8048320 <_init+0x30>

08048370 <__libc_start_main@plt>:
 8048370:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 8048376:	68 20 00 00 00       	push   0x20
 804837b:	e9 a0 ff ff ff       	jmp    8048320 <_init+0x30>

セクション .text の逆アセンブル:

08048380 <_start>:
 8048380:	31 ed                	xor    ebp,ebp
 8048382:	5e                   	pop    esi
 8048383:	89 e1                	mov    ecx,esp
 8048385:	83 e4 f0             	and    esp,0xfffffff0
 8048388:	50                   	push   eax
 8048389:	54                   	push   esp
 804838a:	52                   	push   edx
 804838b:	68 50 85 04 08       	push   0x8048550
 8048390:	68 e0 84 04 08       	push   0x80484e0
 8048395:	51                   	push   ecx
 8048396:	56                   	push   esi
 8048397:	68 7d 84 04 08       	push   0x804847d
 804839c:	e8 cf ff ff ff       	call   8048370 <__libc_start_main@plt>
 80483a1:	f4                   	hlt    
 80483a2:	66 90                	xchg   ax,ax
 80483a4:	66 90                	xchg   ax,ax
 80483a6:	66 90                	xchg   ax,ax
 80483a8:	66 90                	xchg   ax,ax
 80483aa:	66 90                	xchg   ax,ax
 80483ac:	66 90                	xchg   ax,ax
 80483ae:	66 90                	xchg   ax,ax

080483b0 <__x86.get_pc_thunk.bx>:
 80483b0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483b3:	c3                   	ret    
 80483b4:	66 90                	xchg   ax,ax
 80483b6:	66 90                	xchg   ax,ax
 80483b8:	66 90                	xchg   ax,ax
 80483ba:	66 90                	xchg   ax,ax
 80483bc:	66 90                	xchg   ax,ax
 80483be:	66 90                	xchg   ax,ax

080483c0 <deregister_tm_clones>:
 80483c0:	b8 2b a0 04 08       	mov    eax,0x804a02b
 80483c5:	2d 28 a0 04 08       	sub    eax,0x804a028
 80483ca:	83 f8 06             	cmp    eax,0x6
 80483cd:	77 01                	ja     80483d0 <deregister_tm_clones+0x10>
 80483cf:	c3                   	ret    
 80483d0:	b8 00 00 00 00       	mov    eax,0x0
 80483d5:	85 c0                	test   eax,eax
 80483d7:	74 f6                	je     80483cf <deregister_tm_clones+0xf>
 80483d9:	55                   	push   ebp
 80483da:	89 e5                	mov    ebp,esp
 80483dc:	83 ec 18             	sub    esp,0x18
 80483df:	c7 04 24 28 a0 04 08 	mov    DWORD PTR [esp],0x804a028
 80483e6:	ff d0                	call   eax
 80483e8:	c9                   	leave  
 80483e9:	c3                   	ret    
 80483ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

080483f0 <register_tm_clones>:
 80483f0:	b8 28 a0 04 08       	mov    eax,0x804a028
 80483f5:	2d 28 a0 04 08       	sub    eax,0x804a028
 80483fa:	c1 f8 02             	sar    eax,0x2
 80483fd:	89 c2                	mov    edx,eax
 80483ff:	c1 ea 1f             	shr    edx,0x1f
 8048402:	01 d0                	add    eax,edx
 8048404:	d1 f8                	sar    eax,1
 8048406:	75 01                	jne    8048409 <register_tm_clones+0x19>
 8048408:	c3                   	ret    
 8048409:	ba 00 00 00 00       	mov    edx,0x0
 804840e:	85 d2                	test   edx,edx
 8048410:	74 f6                	je     8048408 <register_tm_clones+0x18>
 8048412:	55                   	push   ebp
 8048413:	89 e5                	mov    ebp,esp
 8048415:	83 ec 18             	sub    esp,0x18
 8048418:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804841c:	c7 04 24 28 a0 04 08 	mov    DWORD PTR [esp],0x804a028
 8048423:	ff d2                	call   edx
 8048425:	c9                   	leave  
 8048426:	c3                   	ret    
 8048427:	89 f6                	mov    esi,esi
 8048429:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048430 <__do_global_dtors_aux>:
 8048430:	80 3d 28 a0 04 08 00 	cmp    BYTE PTR ds:0x804a028,0x0
 8048437:	75 13                	jne    804844c <__do_global_dtors_aux+0x1c>
 8048439:	55                   	push   ebp
 804843a:	89 e5                	mov    ebp,esp
 804843c:	83 ec 08             	sub    esp,0x8
 804843f:	e8 7c ff ff ff       	call   80483c0 <deregister_tm_clones>
 8048444:	c6 05 28 a0 04 08 01 	mov    BYTE PTR ds:0x804a028,0x1
 804844b:	c9                   	leave  
 804844c:	f3 c3                	repz ret 
 804844e:	66 90                	xchg   ax,ax

08048450 <frame_dummy>:
 8048450:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 8048455:	85 c0                	test   eax,eax
 8048457:	74 1f                	je     8048478 <frame_dummy+0x28>
 8048459:	b8 00 00 00 00       	mov    eax,0x0
 804845e:	85 c0                	test   eax,eax
 8048460:	74 16                	je     8048478 <frame_dummy+0x28>
 8048462:	55                   	push   ebp
 8048463:	89 e5                	mov    ebp,esp
 8048465:	83 ec 18             	sub    esp,0x18
 8048468:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 804846f:	ff d0                	call   eax
 8048471:	c9                   	leave  
 8048472:	e9 79 ff ff ff       	jmp    80483f0 <register_tm_clones>
 8048477:	90                   	nop
 8048478:	e9 73 ff ff ff       	jmp    80483f0 <register_tm_clones>

0804847d <main>:
 804847d:	55                   	push   ebp
 804847e:	89 e5                	mov    ebp,esp
 8048480:	83 e4 f0             	and    esp,0xfffffff0
 8048483:	83 ec 20             	sub    esp,0x20
 8048486:	c7 04 24 70 85 04 08 	mov    DWORD PTR [esp],0x8048570 # EGG
 804848d:	e8 9e fe ff ff       	call   8048330 <getenv@plt>
 8048492:	85 c0                	test   eax,eax # eaxが0かどうか
 8048494:	75 18                	jne    80484ae <main+0x31> # 0でなかったら80484ae
 8048496:	c7 04 24 74 85 04 08 	mov    DWORD PTR [esp],0x8048574 # Give me something to execute at the env-variable EGG
 804849d:	e8 9e fe ff ff       	call   8048340 <puts@plt> # puts("Give me something to execute at the env-variable EGG")
 80484a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1 # 1
 80484a9:	e8 b2 fe ff ff       	call   8048360 <exit@plt> # exit(1)
 80484ae:	c7 04 24 a9 85 04 08 	mov    DWORD PTR [esp],0x80485a9 # Trying to execute EGG!
 80484b5:	e8 86 fe ff ff       	call   8048340 <puts@plt> # puts("Trying to execute EGG!")
 80484ba:	c7 04 24 70 85 04 08 	mov    DWORD PTR [esp],0x8048570 # EGG
 80484c1:	e8 6a fe ff ff       	call   8048330 <getenv@plt> # getenv
 80484c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax # getenvの戻り地をesp+0x1cへ
 80484ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c] # eax = esp+0x1c
 80484ce:	ff d0                	call   eax
 80484d0:	b8 00 00 00 00       	mov    eax,0x0
 80484d5:	c9                   	leave  
 80484d6:	c3                   	ret    
 80484d7:	66 90                	xchg   ax,ax
 80484d9:	66 90                	xchg   ax,ax
 80484db:	66 90                	xchg   ax,ax
 80484dd:	66 90                	xchg   ax,ax
 80484df:	90                   	nop

080484e0 <__libc_csu_init>:
 80484e0:	55                   	push   ebp
 80484e1:	57                   	push   edi
 80484e2:	31 ff                	xor    edi,edi
 80484e4:	56                   	push   esi
 80484e5:	53                   	push   ebx
 80484e6:	e8 c5 fe ff ff       	call   80483b0 <__x86.get_pc_thunk.bx>
 80484eb:	81 c3 15 1b 00 00    	add    ebx,0x1b15
 80484f1:	83 ec 1c             	sub    esp,0x1c
 80484f4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80484f8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80484fe:	e8 ed fd ff ff       	call   80482f0 <_init>
 8048503:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 8048509:	29 c6                	sub    esi,eax
 804850b:	c1 fe 02             	sar    esi,0x2
 804850e:	85 f6                	test   esi,esi
 8048510:	74 27                	je     8048539 <__libc_csu_init+0x59>
 8048512:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 8048518:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 804851c:	89 2c 24             	mov    DWORD PTR [esp],ebp
 804851f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 8048523:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 8048527:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804852b:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 8048532:	83 c7 01             	add    edi,0x1
 8048535:	39 f7                	cmp    edi,esi
 8048537:	75 df                	jne    8048518 <__libc_csu_init+0x38>
 8048539:	83 c4 1c             	add    esp,0x1c
 804853c:	5b                   	pop    ebx
 804853d:	5e                   	pop    esi
 804853e:	5f                   	pop    edi
 804853f:	5d                   	pop    ebp
 8048540:	c3                   	ret    
 8048541:	eb 0d                	jmp    8048550 <__libc_csu_fini>
 8048543:	90                   	nop
 8048544:	90                   	nop
 8048545:	90                   	nop
 8048546:	90                   	nop
 8048547:	90                   	nop
 8048548:	90                   	nop
 8048549:	90                   	nop
 804854a:	90                   	nop
 804854b:	90                   	nop
 804854c:	90                   	nop
 804854d:	90                   	nop
 804854e:	90                   	nop
 804854f:	90                   	nop

08048550 <__libc_csu_fini>:
 8048550:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

08048554 <_fini>:
 8048554:	53                   	push   ebx
 8048555:	83 ec 08             	sub    esp,0x8
 8048558:	e8 53 fe ff ff       	call   80483b0 <__x86.get_pc_thunk.bx>
 804855d:	81 c3 a3 1a 00 00    	add    ebx,0x1aa3
 8048563:	83 c4 08             	add    esp,0x8
 8048566:	5b                   	pop    ebx
 8048567:	c3                   	ret    
