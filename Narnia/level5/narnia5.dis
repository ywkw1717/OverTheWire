
narnia5:     ファイル形式 elf32-i386


セクション .init の逆アセンブル:

08048310 <_init>:
 8048310:	53                   	push   ebx
 8048311:	83 ec 08             	sub    esp,0x8
 8048314:	e8 d7 00 00 00       	call   80483f0 <__x86.get_pc_thunk.bx>
 8048319:	81 c3 3f 15 00 00    	add    ebx,0x153f
 804831f:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048325:	85 c0                	test   eax,eax
 8048327:	74 05                	je     804832e <_init+0x1e>
 8048329:	e8 52 00 00 00       	call   8048380 <__gmon_start__@plt>
 804832e:	83 c4 08             	add    esp,0x8
 8048331:	5b                   	pop    ebx
 8048332:	c3                   	ret    

セクション .plt の逆アセンブル:

08048340 <printf@plt-0x10>:
 8048340:	ff 35 5c 98 04 08    	push   DWORD PTR ds:0x804985c
 8048346:	ff 25 60 98 04 08    	jmp    DWORD PTR ds:0x8049860
 804834c:	00 00                	add    BYTE PTR [eax],al
	...

08048350 <printf@plt>:
 8048350:	ff 25 64 98 04 08    	jmp    DWORD PTR ds:0x8049864
 8048356:	68 00 00 00 00       	push   0x0
 804835b:	e9 e0 ff ff ff       	jmp    8048340 <_init+0x30>

08048360 <puts@plt>:
 8048360:	ff 25 68 98 04 08    	jmp    DWORD PTR ds:0x8049868
 8048366:	68 08 00 00 00       	push   0x8
 804836b:	e9 d0 ff ff ff       	jmp    8048340 <_init+0x30>

08048370 <system@plt>:
 8048370:	ff 25 6c 98 04 08    	jmp    DWORD PTR ds:0x804986c
 8048376:	68 10 00 00 00       	push   0x10
 804837b:	e9 c0 ff ff ff       	jmp    8048340 <_init+0x30>

08048380 <__gmon_start__@plt>:
 8048380:	ff 25 70 98 04 08    	jmp    DWORD PTR ds:0x8049870
 8048386:	68 18 00 00 00       	push   0x18
 804838b:	e9 b0 ff ff ff       	jmp    8048340 <_init+0x30>

08048390 <strlen@plt>:
 8048390:	ff 25 74 98 04 08    	jmp    DWORD PTR ds:0x8049874
 8048396:	68 20 00 00 00       	push   0x20
 804839b:	e9 a0 ff ff ff       	jmp    8048340 <_init+0x30>

080483a0 <__libc_start_main@plt>:
 80483a0:	ff 25 78 98 04 08    	jmp    DWORD PTR ds:0x8049878
 80483a6:	68 28 00 00 00       	push   0x28
 80483ab:	e9 90 ff ff ff       	jmp    8048340 <_init+0x30>

080483b0 <snprintf@plt>:
 80483b0:	ff 25 7c 98 04 08    	jmp    DWORD PTR ds:0x804987c
 80483b6:	68 30 00 00 00       	push   0x30
 80483bb:	e9 80 ff ff ff       	jmp    8048340 <_init+0x30>

セクション .text の逆アセンブル:

080483c0 <_start>:
 80483c0:	31 ed                	xor    ebp,ebp
 80483c2:	5e                   	pop    esi
 80483c3:	89 e1                	mov    ecx,esp
 80483c5:	83 e4 f0             	and    esp,0xfffffff0
 80483c8:	50                   	push   eax
 80483c9:	54                   	push   esp
 80483ca:	52                   	push   edx
 80483cb:	68 f0 85 04 08       	push   0x80485f0
 80483d0:	68 80 85 04 08       	push   0x8048580
 80483d5:	51                   	push   ecx
 80483d6:	56                   	push   esi
 80483d7:	68 bd 84 04 08       	push   0x80484bd
 80483dc:	e8 bf ff ff ff       	call   80483a0 <__libc_start_main@plt>
 80483e1:	f4                   	hlt    
 80483e2:	66 90                	xchg   ax,ax
 80483e4:	66 90                	xchg   ax,ax
 80483e6:	66 90                	xchg   ax,ax
 80483e8:	66 90                	xchg   ax,ax
 80483ea:	66 90                	xchg   ax,ax
 80483ec:	66 90                	xchg   ax,ax
 80483ee:	66 90                	xchg   ax,ax

080483f0 <__x86.get_pc_thunk.bx>:
 80483f0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 80483f3:	c3                   	ret    
 80483f4:	66 90                	xchg   ax,ax
 80483f6:	66 90                	xchg   ax,ax
 80483f8:	66 90                	xchg   ax,ax
 80483fa:	66 90                	xchg   ax,ax
 80483fc:	66 90                	xchg   ax,ax
 80483fe:	66 90                	xchg   ax,ax

08048400 <deregister_tm_clones>:
 8048400:	b8 8b 98 04 08       	mov    eax,0x804988b
 8048405:	2d 88 98 04 08       	sub    eax,0x8049888
 804840a:	83 f8 06             	cmp    eax,0x6
 804840d:	77 01                	ja     8048410 <deregister_tm_clones+0x10>
 804840f:	c3                   	ret    
 8048410:	b8 00 00 00 00       	mov    eax,0x0
 8048415:	85 c0                	test   eax,eax
 8048417:	74 f6                	je     804840f <deregister_tm_clones+0xf>
 8048419:	55                   	push   ebp
 804841a:	89 e5                	mov    ebp,esp
 804841c:	83 ec 18             	sub    esp,0x18
 804841f:	c7 04 24 88 98 04 08 	mov    DWORD PTR [esp],0x8049888
 8048426:	ff d0                	call   eax
 8048428:	c9                   	leave  
 8048429:	c3                   	ret    
 804842a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

08048430 <register_tm_clones>:
 8048430:	b8 88 98 04 08       	mov    eax,0x8049888
 8048435:	2d 88 98 04 08       	sub    eax,0x8049888
 804843a:	c1 f8 02             	sar    eax,0x2
 804843d:	89 c2                	mov    edx,eax
 804843f:	c1 ea 1f             	shr    edx,0x1f
 8048442:	01 d0                	add    eax,edx
 8048444:	d1 f8                	sar    eax,1
 8048446:	75 01                	jne    8048449 <register_tm_clones+0x19>
 8048448:	c3                   	ret    
 8048449:	ba 00 00 00 00       	mov    edx,0x0
 804844e:	85 d2                	test   edx,edx
 8048450:	74 f6                	je     8048448 <register_tm_clones+0x18>
 8048452:	55                   	push   ebp
 8048453:	89 e5                	mov    ebp,esp
 8048455:	83 ec 18             	sub    esp,0x18
 8048458:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804845c:	c7 04 24 88 98 04 08 	mov    DWORD PTR [esp],0x8049888
 8048463:	ff d2                	call   edx
 8048465:	c9                   	leave  
 8048466:	c3                   	ret    
 8048467:	89 f6                	mov    esi,esi
 8048469:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

08048470 <__do_global_dtors_aux>:
 8048470:	80 3d 88 98 04 08 00 	cmp    BYTE PTR ds:0x8049888,0x0
 8048477:	75 13                	jne    804848c <__do_global_dtors_aux+0x1c>
 8048479:	55                   	push   ebp
 804847a:	89 e5                	mov    ebp,esp
 804847c:	83 ec 08             	sub    esp,0x8
 804847f:	e8 7c ff ff ff       	call   8048400 <deregister_tm_clones>
 8048484:	c6 05 88 98 04 08 01 	mov    BYTE PTR ds:0x8049888,0x1
 804848b:	c9                   	leave  
 804848c:	f3 c3                	repz ret 
 804848e:	66 90                	xchg   ax,ax

08048490 <frame_dummy>:
 8048490:	a1 68 97 04 08       	mov    eax,ds:0x8049768
 8048495:	85 c0                	test   eax,eax
 8048497:	74 1f                	je     80484b8 <frame_dummy+0x28>
 8048499:	b8 00 00 00 00       	mov    eax,0x0
 804849e:	85 c0                	test   eax,eax
 80484a0:	74 16                	je     80484b8 <frame_dummy+0x28>
 80484a2:	55                   	push   ebp
 80484a3:	89 e5                	mov    ebp,esp
 80484a5:	83 ec 18             	sub    esp,0x18
 80484a8:	c7 04 24 68 97 04 08 	mov    DWORD PTR [esp],0x8049768
 80484af:	ff d0                	call   eax
 80484b1:	c9                   	leave  
 80484b2:	e9 79 ff ff ff       	jmp    8048430 <register_tm_clones>
 80484b7:	90                   	nop
 80484b8:	e9 73 ff ff ff       	jmp    8048430 <register_tm_clones>

080484bd <main>:
 80484bd:	55                   	push   ebp
 80484be:	89 e5                	mov    ebp,esp
 80484c0:	83 e4 f0             	and    esp,0xfffffff0
 80484c3:	83 ec 60             	sub    esp,0x60
 80484c6:	c7 44 24 5c 01 00 00 	mov    DWORD PTR [esp+0x5c],0x1 # i = 1
 80484cd:	00 
 80484ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc] # eax = argv[0]
 80484d1:	83 c0 04             	add    eax,0x4 # eax += 4 -> eax = argv[1]
 80484d4:	8b 00                	mov    eax,DWORD PTR [eax]
 80484d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax # sprintfの第3引数
 80484da:	c7 44 24 04 40 00 00 	mov    DWORD PTR [esp+0x4],0x40 # sprintfの第2引数
 80484e1:	00 
 80484e2:	8d 44 24 1c          	lea    eax,[esp+0x1c] # eax = buf
 80484e6:	89 04 24             	mov    DWORD PTR [esp],eax # sprintfの第1引数
 80484e9:	e8 c2 fe ff ff       	call   80483b0 <snprintf@plt> # snprintf(buf, 0x40, argv[1])
 80484ee:	c6 44 24 5b 00       	mov    BYTE PTR [esp+0x5b],0x0
 80484f3:	c7 04 24 10 86 04 08 	mov    DWORD PTR [esp],0x8048610 # "Change i's value from 1 -> 500. "
 80484fa:	e8 51 fe ff ff       	call   8048350 <printf@plt> # printf("Change i's value from 1 -> 500. ")
 80484ff:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c] # eax = i
 8048503:	3d f4 01 00 00       	cmp    eax,0x1f4 # if(i == 0x1f4(500))
 8048508:	75 18                	jne    8048522 <main+0x65>
 804850a:	c7 04 24 31 86 04 08 	mov    DWORD PTR [esp],0x8048631 # "GOOD"
 8048511:	e8 4a fe ff ff       	call   8048360 <puts@plt> # puts("GOOD")
 8048516:	c7 04 24 36 86 04 08 	mov    DWORD PTR [esp],0x8048636 # "/bin/sh"
 804851d:	e8 4e fe ff ff       	call   8048370 <system@plt> # sytem("/bin/sh")
 8048522:	c7 04 24 40 86 04 08 	mov    DWORD PTR [esp],0x8048640 # "No way...let me give you a hint!"
 8048529:	e8 32 fe ff ff       	call   8048360 <puts@plt> # puts("No way...let me give you a hint!")
 804852e:	8d 44 24 1c          	lea    eax,[esp+0x1c] # eax = buf
 8048532:	89 04 24             	mov    DWORD PTR [esp],eax
 8048535:	e8 56 fe ff ff       	call   8048390 <strlen@plt> # strlen(buf)
 804853a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 804853e:	8d 44 24 1c          	lea    eax,[esp+0x1c] # eax = buf
 8048542:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048546:	c7 04 24 61 86 04 08 	mov    DWORD PTR [esp],0x8048661 # "buffer : [%s] (%d)\n"
 804854d:	e8 fe fd ff ff       	call   8048350 <printf@plt> # printf("buffer : [%s] (%d)\n", buf, strlen(buf))
 8048552:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
 8048556:	8d 54 24 5c          	lea    edx,[esp+0x5c]
 804855a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
 804855e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 8048562:	c7 04 24 75 86 04 08 	mov    DWORD PTR [esp],0x8048675 # "i = %d (%p)\n"
 8048569:	e8 e2 fd ff ff       	call   8048350 <printf@plt> # printf("i = %d (%p)\n", i, &i)
 804856e:	b8 00 00 00 00       	mov    eax,0x0 # return 0
 8048573:	c9                   	leave  
 8048574:	c3                   	ret    
 8048575:	66 90                	xchg   ax,ax
 8048577:	66 90                	xchg   ax,ax
 8048579:	66 90                	xchg   ax,ax
 804857b:	66 90                	xchg   ax,ax
 804857d:	66 90                	xchg   ax,ax
 804857f:	90                   	nop

08048580 <__libc_csu_init>:
 8048580:	55                   	push   ebp
 8048581:	57                   	push   edi
 8048582:	31 ff                	xor    edi,edi
 8048584:	56                   	push   esi
 8048585:	53                   	push   ebx
 8048586:	e8 65 fe ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 804858b:	81 c3 cd 12 00 00    	add    ebx,0x12cd
 8048591:	83 ec 1c             	sub    esp,0x1c
 8048594:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 8048598:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 804859e:	e8 6d fd ff ff       	call   8048310 <_init>
 80485a3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80485a9:	29 c6                	sub    esi,eax
 80485ab:	c1 fe 02             	sar    esi,0x2
 80485ae:	85 f6                	test   esi,esi
 80485b0:	74 27                	je     80485d9 <__libc_csu_init+0x59>
 80485b2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80485b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80485bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80485bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80485c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80485c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80485cb:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80485d2:	83 c7 01             	add    edi,0x1
 80485d5:	39 f7                	cmp    edi,esi
 80485d7:	75 df                	jne    80485b8 <__libc_csu_init+0x38>
 80485d9:	83 c4 1c             	add    esp,0x1c
 80485dc:	5b                   	pop    ebx
 80485dd:	5e                   	pop    esi
 80485de:	5f                   	pop    edi
 80485df:	5d                   	pop    ebp
 80485e0:	c3                   	ret    
 80485e1:	eb 0d                	jmp    80485f0 <__libc_csu_fini>
 80485e3:	90                   	nop
 80485e4:	90                   	nop
 80485e5:	90                   	nop
 80485e6:	90                   	nop
 80485e7:	90                   	nop
 80485e8:	90                   	nop
 80485e9:	90                   	nop
 80485ea:	90                   	nop
 80485eb:	90                   	nop
 80485ec:	90                   	nop
 80485ed:	90                   	nop
 80485ee:	90                   	nop
 80485ef:	90                   	nop

080485f0 <__libc_csu_fini>:
 80485f0:	f3 c3                	repz ret 

セクション .fini の逆アセンブル:

080485f4 <_fini>:
 80485f4:	53                   	push   ebx
 80485f5:	83 ec 08             	sub    esp,0x8
 80485f8:	e8 f3 fd ff ff       	call   80483f0 <__x86.get_pc_thunk.bx>
 80485fd:	81 c3 5b 12 00 00    	add    ebx,0x125b
 8048603:	83 c4 08             	add    esp,0x8
 8048606:	5b                   	pop    ebx
 8048607:	c3                   	ret    
